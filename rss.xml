<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[yerevancoder]]></title><description><![CDATA[A place for Armenian coders to talk]]></description><link>https://yerevancoder.com</link><generator>RSS for Node</generator><lastBuildDate>Tue, 20 Feb 2018 20:28:24 GMT</lastBuildDate><item><title><![CDATA[No title]]></title><description><![CDATA[A lists of things This blog post is part of the posts series done for iterate hackerspace, explaining some of basic programming concepts…]]></description><link>https://yerevancoder.com/2018-02-21-js-arrays-and-objects/</link><guid isPermaLink="false">https://yerevancoder.com/2018-02-21-js-arrays-and-objects/</guid><content:encoded>&lt;h1&gt;A lists of things&lt;/h1&gt;
&lt;p&gt;This blog post is part of the posts series done for iterate hackerspace, explaining some of basic programming concepts implemented in JavaScript.&lt;/p&gt;
&lt;h5&gt;Table of contents&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;#intro-array&quot;&gt;Introduction to arrays&lt;/a&gt;
&lt;a href=&quot;#array-operations&quot;&gt;Basic array operations&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#we-knew&quot;&gt;The ways we know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#push&quot;&gt;Push&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#pop&quot;&gt;Pop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#map&quot;&gt;Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#others&quot;&gt;Other methods&lt;/a&gt;
&lt;a href=&quot;#intro-obj&quot;&gt;Introduction to objects&lt;/a&gt;
&lt;a href=&quot;#obj-operations&quot;&gt;Iterating over objects&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#we-knew&quot;&gt;The ways we know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#keys&quot;&gt;Object,keys()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#values&quot;&gt;Object,values()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#others&quot;&gt;Others&lt;/a&gt;
&lt;a href=&quot;#bugs&quot;&gt;Some fun stuff: Bugs &lt;/a&gt;
&lt;a href=&quot;#aftermath&quot;&gt;Aftermath &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Introduction to arrays&lt;/h2&gt;
&lt;p&gt;Allrighty then, we already know the primitive data types such as &lt;code&gt;numbers&lt;/code&gt;, &lt;code&gt;booleans&lt;/code&gt;, &lt;code&gt;strings&lt;/code&gt; etc. Usually though, we need not only one of them, but a whole list in a certain order. Like, for example, when you have average wind speed data by days and you want to make some statistical analyze. Obviously, having data about only just 1 day is not enough, you will need at least the data of 1 month, which is 30-31 numbers in a list, in a specific order. In JavaScript, those lists are called &lt;strong&gt;&lt;em&gt;arrays&lt;/em&gt;&lt;/strong&gt;. Here’s how you declare an array;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;You can have as many elements as you want. Those elements will be given indices. Every element will have an index, starting from 0. So to get the data of the first &lt;code&gt;member&lt;/code&gt; of the array you write.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;In the same manner, to get the data of the 4th &lt;code&gt;member&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;You can do a lot of stuff with arays, and some of the operations will be discussed now.&lt;/p&gt;
&lt;h2&gt;Basic array operations&lt;/h2&gt;
&lt;h3&gt;The ways we know&lt;/h3&gt;
&lt;p&gt;Usually, you will not only need data, but also need to do some specific things for every item of the array. Of course, we already know some ways to do it, as Array type is also Iterateable (has countable, discrete items). We can use &lt;code&gt;for loops&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;OR&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;OR&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Let’s talk a little about this code. The first unknown thing here is &lt;code&gt;a.length&lt;/code&gt;. However, as common sense may suggest, it just gives back the &lt;code&gt;length&lt;/code&gt; of the array. Second thing is that in case of &lt;code&gt;for .. of&lt;/code&gt; loop we just logged &lt;code&gt;i&lt;/code&gt; but in case of &lt;code&gt;for .. in&lt;/code&gt; we logged &lt;code&gt;a[i]&lt;/code&gt;. Can you answer why?&lt;/p&gt;
&lt;h3&gt;The ways that are better&lt;/h3&gt;
&lt;p&gt;See, we know some ways already to deal with arrays. Bud do we usually need those ways in case of some common operations, like finding a specific item that satisfies the condition, or doing some operation on every item of the array and so on.
&lt;strong&gt;&lt;em&gt;The answer is no&lt;/em&gt;&lt;/strong&gt;
Why? Because kind people working on improving JS have created a bunch of &lt;code&gt;methods&lt;/code&gt; (special synonym for the word &lt;code&gt;function&lt;/code&gt;, in case that those collection of functions are specified for in conjuction with a certain data type), which will do almost everything you need for you. Let’s take a look at some array &lt;code&gt;methods&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;1. Push&lt;/h4&gt;
&lt;p&gt;You can use push to append one or many elements at the end of the array. Try it yourselves.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;As you may notice, the a is now &lt;code&gt;[1, 2, 3, 5, 6]&lt;/code&gt;. Remember: You can add one or more items using push.&lt;/p&gt;
&lt;h4&gt;2. Pop&lt;/h4&gt;
&lt;p&gt;This is the reverse of &lt;code&gt;push&lt;/code&gt;. It takes out the last element of the array. Try it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// will log 5;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// a is now [1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Warning&lt;/em&gt;&lt;/strong&gt;: Using pop in some places may cause bugs and loss of data; If you need to access just the data without removing the item use:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Gets the last element of the array w/out removing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h4&gt;3. Map&lt;/h4&gt;
&lt;p&gt;We reached the interesting part :smiley:&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;map&lt;/code&gt; is used to do something on every item of the array. It gets 1 argument — a function which will be applied on the every element. It will return a new array — the resultant array without changing anything in the original one. The function that map will get has 3 arguments.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The current item&lt;/li&gt;
&lt;li&gt;The index of the current item&lt;/li&gt;
&lt;li&gt;The whole array.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We usually don’t need the 3rd one though, we can just leave it missing.
Let’s check out an example.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentItem&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; currentItemIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentItem&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; currentItemIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; currentItem &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;Other functions.&lt;/h3&gt;
&lt;p&gt;Let’s take a look at &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;MDN&lt;/a&gt; to see some other functions. Also you can use &lt;a href=&quot;https://sdras.github.io/array-explorer/&quot;&gt;Sarah Drassner’s array explorer&lt;/a&gt; which is probably the easiest way to find the method you want to use.&lt;/p&gt;
&lt;h2&gt;Introduction to Objects.&lt;/h2&gt;
&lt;p&gt;Okay, now we know about arrays. They are used when we have a lot of things of the same types. But let’s imagine for example the table. Can you name some characteristics of the table? Do they all have the same type? Do, for example, color and width both have the same type? No, because one of them is a color name — a string and the other one is a number.&lt;/p&gt;
&lt;p&gt;This example shows that we don’t only need primitive data types and arrays, we also need some containers to keep different kinds of data about the same object in one place.&lt;/p&gt;
&lt;p&gt;That’s why we have &lt;code&gt;objects&lt;/code&gt;. You may remember them from the lecture about loops, where we had a row of people each memorising a number.&lt;/p&gt;
&lt;p&gt;Let’s take a look at some object.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; table &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; width&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; length&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; material&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;wood&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;As you can see, we have some correspondence. There is a &lt;code&gt;key&lt;/code&gt; and corresponding &lt;code&gt;value&lt;/code&gt;. Multiple of those pairs are divided from each other by commas. So this is the data about a wooden table with width 15, height 10 and length 30.&lt;/p&gt;
&lt;p&gt;What if we want to know it’s height given the object?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;table&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The &lt;code&gt;.&lt;/code&gt; is called &lt;code&gt;property accessor operator&lt;/code&gt;, because &lt;code&gt;height&lt;/code&gt; is the property of the table (makes sense in English right?).&lt;/p&gt;
&lt;p&gt;Let’s do some brain damage! We can have objects inside objects. Let’s say we have a box and inside it we have some glove.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; box &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    height&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    width&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    glove&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        material&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;silk&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        fingers&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        beautiful&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;So the glove is the property of the box, but glove has its own properties. Now how do we know if the glove is beautiful or not?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;box&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;glove&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;beautiful&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This is just getting the property of the property.&lt;/p&gt;
&lt;h3&gt;Iterating over the Objects.&lt;/h3&gt;
&lt;h4&gt;The ways we know&lt;/h4&gt;
&lt;p&gt;We already know that we can use ‘for .. in’ loop to iterate over the object. In that case, the iterator variable will have the key in it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;const someObj = { a: 1, b: 2, c: 3};
for(let i in someObj) {
    console.log(i, someObj[i]);
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Do you see something strange here? We used another syntax other than the &lt;code&gt;property accessor operator&lt;/code&gt; to get the value associated with the current key. That’s because in case of writing &lt;code&gt;someObj.i&lt;/code&gt; JS will literally try to find the property &lt;code&gt;i&lt;/code&gt;. It won’t understand that &lt;code&gt;i&lt;/code&gt; is a varable and that it needs to change that &lt;code&gt;i&lt;/code&gt; with the key value. So we use array like syntax to get the value associated with the key. In this case, whatever is inside &lt;code&gt;[]&lt;/code&gt; is treated like a string. So we could do something like.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; table &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; width&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; length&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; material&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;wood&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;table&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This is a legal syntax, but it is usually used only in cases when the name of the property is stored in the variable and the &lt;code&gt;.&lt;/code&gt; operator can’t be used.&lt;/p&gt;
&lt;p&gt;Getting back to the topic. Using &lt;code&gt;for .. in&lt;/code&gt; loop we can iterate over the object, but just like in case of the arrays, we can use some methods and make our code cleaner and the job of others easier.&lt;/p&gt;
&lt;p&gt;There are 2 main methods that we will need, if we need to iterate over the object. Those 2 will give back an array given the object. Let’s take a look.&lt;/p&gt;
&lt;h4&gt;The ways that are better.&lt;/h4&gt;
&lt;h5&gt;Object.keys()&lt;/h5&gt;
&lt;p&gt;This method will give back the keys of the object in the array. The argument of this &lt;code&gt;method&lt;/code&gt; should be an object. Here’s an example&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; someObj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;someObj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Now, after having an array we can use &lt;code&gt;any&lt;/code&gt; array method. On the object. Try experimenting with this at home.&lt;/p&gt;
&lt;h5&gt;Object.values()&lt;/h5&gt;
&lt;p&gt;Guess what this method does?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; someObj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;someObj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;em&gt;NOTE: The order of the properties is not guaranteed. This means that if you have the object created like &lt;code&gt;{a: 1, b: 2, c: 3}&lt;/code&gt;, those methods won’t necessarily return &lt;code&gt;[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]&lt;/code&gt; or &lt;code&gt;[1, 2, 3]&lt;/code&gt;. It can be &lt;code&gt;[&quot;b&quot;, &quot;a&quot;, &quot;c&quot;]&lt;/code&gt; or &lt;code&gt;[3, 1, 2]&lt;/code&gt; or any other order.&lt;/em&gt;&lt;/p&gt;
&lt;h5&gt;Other methods&lt;/h5&gt;
&lt;p&gt;Again, our best friend &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;MDN&lt;/a&gt; will come to help. By the way Sarah also has created the &lt;a href=&quot;https://sdras.github.io/array-explorer/&quot;&gt;Object explorer&lt;/a&gt;, so you can use it too.&lt;/p&gt;
&lt;h2&gt;Some fun stuff: Bugs&lt;/h2&gt;
&lt;p&gt;Try this in some interpreter.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;lol&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;haha&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The result is something that is out of logic. This is a somewhat bug, because in JS &lt;code&gt;Arrays&lt;/code&gt; and &lt;code&gt;Objects&lt;/code&gt; are almost the same. This is a proof of it.&lt;/p&gt;
&lt;p&gt;Now try this.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;What do you see? Do you like the result?&lt;/p&gt;
&lt;p&gt;Challenge. Try to make the resulting string have a comma between 3 and 4.&lt;/p&gt;
&lt;p&gt;It won’t work if you add a comma after the 3, because the comma of the last element is ignored by the JS interpreter, just like the semicolons for example.&lt;/p&gt;
&lt;h2&gt;Aftermath&lt;/h2&gt;
&lt;p&gt;This is probably just 10% of all the things connected with Arrays and Objects. Talking about everything connected with them will take a lot of time, and makes no sense. The lot of stuff that will be needed can be Googled. The other 90% is on you, and on experience, as you will learn them on the go, when you will need them.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Git]]></title><description><![CDATA[Introduction to git What is git?   Alright, we are already familiar to javascript basics, and we might want to create some cool projects…]]></description><link>https://yerevancoder.com/2018-02-18-git-and-github/</link><guid isPermaLink="false">https://yerevancoder.com/2018-02-18-git-and-github/</guid><pubDate>Sun, 18 Feb 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Introduction to git&lt;/h1&gt;
&lt;h2&gt;What is git?&lt;/h2&gt;
&lt;p&gt;  Alright, we are already familiar to javascript basics, and we might want to create some cool projects.&lt;/p&gt;
&lt;p&gt;  Imagine that you and your friends are working on the same project.
you probably are continually writing new source code and  changing the existing source code.
In this case the team need some software tools that help them manage changes to source code over time.
Version control software (VCS) keeps track of every modification to the code in a special kind of database.
If a mistake is made, developers can turn back the clock and compare earlier versions of the code to help fix
the mistake while minimizing disruption to all team members.
Developing software without using version control is risky, like not having backups.
n
Git is a free, open source and the most commonly used distributed version control system (DVCS) today.&lt;/p&gt;
&lt;p&gt;  Git was started by Linus Trovalds, the same person who created Linux.&lt;/p&gt;
&lt;h2&gt;What is github?&lt;/h2&gt;
&lt;p&gt;   GitHub is a hosting service for Git repositories.
GitHub is a website where you can upload a copy of your Git repository.&lt;/p&gt;
&lt;p&gt;   Git and Github are not the same things:
Git is the tool, GitHub is the service for projects that use Git.&lt;/p&gt;
&lt;p&gt;   GitHub provides free plans for open-source projects and paid plans offering unlimited private repositories.&lt;/p&gt;
&lt;p&gt;   Before moving on to the git basics, please create your personal github account.&lt;/p&gt;
&lt;h2&gt;Git basics&lt;/h2&gt;
&lt;h4&gt;Install git&lt;/h4&gt;
&lt;p&gt;  $ sudo apt-get update&lt;/p&gt;
&lt;p&gt;  $ sudo apt-get install git&lt;/p&gt;
&lt;p&gt;  $ git —version&lt;/p&gt;
&lt;h4&gt;Create a new directory, and open it&lt;/h4&gt;
&lt;p&gt;  $ mkdir my-directory&lt;/p&gt;
&lt;p&gt;  $ cd my-directory&lt;/p&gt;
&lt;h4&gt;Create some files&lt;/h4&gt;
&lt;p&gt;  $ touch file.js&lt;/p&gt;
&lt;p&gt;  $ touch file2.js&lt;/p&gt;
&lt;h4&gt;Create a new git repository.&lt;/h4&gt;
&lt;p&gt;  $ git init&lt;/p&gt;
&lt;p&gt;  Directory now has an empty repository in /.git/.&lt;/p&gt;
&lt;p&gt;  The repository is a hidden directory where Git operates.&lt;/p&gt;
&lt;p&gt;  Git keeps all of its files in the .git directory.&lt;/p&gt;
&lt;h4&gt;Check the hidden files&lt;/h4&gt;
&lt;p&gt;  $ la&lt;/p&gt;
&lt;h4&gt;Check the current state of the project&lt;/h4&gt;
&lt;p&gt;  You can edit the files and check the stage of your project with the following command&lt;/p&gt;
&lt;p&gt;  $ git status&lt;/p&gt;
&lt;h4&gt;Add changes to the staged area&lt;/h4&gt;
&lt;p&gt;  $ git add  ’ file-name ’&lt;/p&gt;
&lt;h4&gt;Unstage&lt;/h4&gt;
&lt;p&gt;  $ git reset  ’ file-name ’&lt;/p&gt;
&lt;p&gt;  The files listed here are in the Staging Area, and they are not in our repository yet.&lt;/p&gt;
&lt;p&gt;  Staging is a step before the commit process in git.&lt;/p&gt;
&lt;h4&gt;Commit&lt;/h4&gt;
&lt;p&gt;  $ git commit -m “a message describing what we’ve changed”.&lt;/p&gt;
&lt;p&gt;  Now if you check the current state of the project you will see ‘nothing to cmmit, working directory clean’.&lt;/p&gt;
&lt;h4&gt;Undo a commit&lt;/h4&gt;
&lt;p&gt;  We can refer to our most recent commit, using HEAD pointer.&lt;/p&gt;
&lt;p&gt;  $ git reset Head~&lt;/p&gt;
&lt;h4&gt;History&lt;/h4&gt;
&lt;p&gt;  Make a few commits. and let’s browse them to see what we changed.&lt;/p&gt;
&lt;p&gt;  $ git log&lt;/p&gt;
&lt;p&gt;  $ git log -1&lt;/p&gt;
&lt;p&gt;  $ git log -2&lt;/p&gt;
&lt;h4&gt;Add a remote repository&lt;/h4&gt;
&lt;p&gt;  To push our local repo to the GitHub server we’ll need to add a remote repository.&lt;/p&gt;
&lt;p&gt;  ‘Origin’ is the default name of the remote git repository you cloned from.&lt;/p&gt;
&lt;p&gt;  The URL could be your repository on GitHub.&lt;/p&gt;
&lt;p&gt;  $ git remote add origin ’ URL ’&lt;/p&gt;
&lt;h4&gt;Push command&lt;/h4&gt;
&lt;p&gt;  push command tells Git where to put our commits.&lt;/p&gt;
&lt;p&gt;  So let’s push our local changes to our origin repo (on GitHub).&lt;/p&gt;
&lt;p&gt;  The name of our remote is origin and the default local branch name is master.&lt;/p&gt;
&lt;p&gt;  The -u tells Git to remember the parameters, so next time simply run git push.&lt;/p&gt;
&lt;p&gt;  $ git push -u origin master&lt;/p&gt;
&lt;h4&gt;Diff&lt;/h4&gt;
&lt;p&gt;  The main objective of version controlling is to enable you to work with different versions of files.&lt;/p&gt;
&lt;p&gt;  Git provides a command ‘diff’ to let you to compare different versions of your files.&lt;/p&gt;
&lt;p&gt;  $ git diff&lt;/p&gt;
&lt;p&gt;   Compares working directory with index (staged area).&lt;/p&gt;
&lt;p&gt;   It shows the changes that are not staged yet.&lt;/p&gt;
&lt;p&gt;  $ git diff HEAD&lt;/p&gt;
&lt;p&gt;   Compares working directory with the commited version.&lt;/p&gt;
&lt;p&gt;   It shows the list of changes after your last commit.&lt;/p&gt;
&lt;p&gt;  $ git diff —cached&lt;/p&gt;
&lt;p&gt;   Compares index (staged area) with the commited version.&lt;/p&gt;
&lt;p&gt;   It shows the diff between your last commit and changes to be committed next.&lt;/p&gt;
&lt;p&gt;   git diff —cahced will only show changes to files in the “staged” area.&lt;/p&gt;
&lt;p&gt;   git diff HEAD will show all changes to tracked files.&lt;/p&gt;
&lt;p&gt;   If you have all changes staged for commit, then both commands will output the same.&lt;/p&gt;
&lt;h4&gt;Pull command&lt;/h4&gt;
&lt;p&gt;   Pull command incorporates changes from a remote repository into the current branch
We can check for changes on our GitHub repository and pull down any new changes&lt;/p&gt;
&lt;p&gt;   $ git pull origin master&lt;/p&gt;
&lt;h4&gt;Branch&lt;/h4&gt;
&lt;p&gt;   Branching is a feature available in most modern version control systems.&lt;/p&gt;
&lt;p&gt;   Git branches are effectively a pointer to a snapshot of your changes.&lt;/p&gt;
&lt;p&gt;   When you are working on a feature or bug you may want to create a copy of the code and make separate commits.&lt;/p&gt;
&lt;h4&gt;Adding a new branch&lt;/h4&gt;
&lt;p&gt;   $ git branch ’ branch-name ’&lt;/p&gt;
&lt;h4&gt;Check branches&lt;/h4&gt;
&lt;p&gt;   $ git branch&lt;/p&gt;
&lt;h4&gt;Switching Branches&lt;/h4&gt;
&lt;p&gt;   $ git checkout ’ branch-name ’&lt;/p&gt;
&lt;p&gt;   when you’re done you can simply merge this branch back into the main master branch (or any other intended branch).&lt;/p&gt;
&lt;p&gt;   $ git merge ’ branch-name ’&lt;/p&gt;
&lt;p&gt;   And finally you can git push.&lt;/p&gt;
&lt;p&gt;   $ git push&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JavaScript. Functions scopes and var.]]></title><description><![CDATA[Functions and scope What the function? Alright, we already know the very basic statements that are enough for writing some reasonable…]]></description><link>https://yerevancoder.com/2018-02-10-js-functions-scopes-and-var/</link><guid isPermaLink="false">https://yerevancoder.com/2018-02-10-js-functions-scopes-and-var/</guid><pubDate>Thu, 15 Feb 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Functions and scope&lt;/h1&gt;
&lt;h2&gt;What the function?&lt;/h2&gt;
&lt;p&gt;Alright, we already know the very basic statements that are enough for writing some reasonable, somewhat useful programs. The next thing to do is studying functions. So what exactly are functions?&lt;/p&gt;
&lt;p&gt;So all of you tried to solve a jigsaw puzzle right? There is a “strategy” of doing that. If you have tried to do it with your friends, usually each one of you solves just one part of the puzzle and then at the end you connect all the parts together. &lt;/p&gt;
&lt;p&gt;In programming world, all the problems are interesting puzzles that need to be solved. And usually, the same strategy works — divide the puzzle into smaller pieces, solve them getting bigger pieces, and then merge those bigger pieces together. These bigger pieces that contain some smaller things, like &lt;code&gt;for&lt;/code&gt;’s and &lt;code&gt;if&lt;/code&gt;’s are called functions. For example, usually when solving puzzle we start with connecting the edges because the edges are simpler to find and locate correctly.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;solveEdges&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;puzzle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; piece &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; puzzle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;piece &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;edge&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;locatePiece&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;addToPuzzle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;puzzle&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; piece&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;How many new things do you see?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Function declaration - There are several ways to define a function in JS and we will talk about them in 10 minutes. However, nowadays, the most popular and advised way of creating a function is using the syntax below.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;anyFunctionName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;putArgumentsHere&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// body&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The syntax is straigtforward. The arrow basically says “take whatever inside the parantheses before me, give them to where I point and do whatever it says until you see a return”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function call to locatePiece - We see a function call and the syntax is pretty easy. You put the name of the function you want to call and then parantheses. In parantheses you can put ANY number of arguments (values that will be passed to the function).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function call to addToPuzzle - This is the logical continuation of #2 here. We put 2 arguments inside the parantheses. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In a sense, functions in math and functions in programming are pretty close syntax-wise. We specify how it will behave, and after that we give some arguments to them and get back values after applying the rules we specified.&lt;/p&gt;
&lt;p&gt;To make this more clear, let’s imagine my friend Edgar is a function. I told him that when I call his name and say a number to him, he should shout back my number times 2. So if I shout Edgar 5 he will get back saying 10. Edgar in this case, is a function which takes one argument - a number and returns a number.&lt;/p&gt;
&lt;p&gt;So now a question, what if we shout Edgar and instead of a number tell, let’s say a word. Will it work or not?&lt;/p&gt;
&lt;p&gt;Challenge, can you write the Edgar function now?&lt;/p&gt;
&lt;p&gt;So how many ways are there to create a function. Well let’s just count them but we will use just one of those types for now.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Normal function. - Defining a function as a function.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;someArg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; someArg &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anonymous function - Not the best way to do it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; num1 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; num2
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arrow (or sometimes called Fat Arrow) functions - Modern clear and preferable way to create functions.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;sayHello&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; text&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are some differences between these three declarations, but those are a out of scope of today’s discussion because they are a bit more advanced.&lt;/p&gt;
&lt;h3&gt;Nesting the functions.&lt;/h3&gt;
&lt;p&gt;As functions are just like numbers and strings, you can put them in any variable almost at any place. This means that even in some function, you can still create functions inside of them. Let’s take a look.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;aaa&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bbb&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; 
            &lt;span class=&quot;token comment&quot;&gt;// So on.&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This is called nesting and this will be useful for explaining scopes.&lt;/p&gt;
&lt;h2&gt;Scopes&lt;/h2&gt;
&lt;p&gt;Scope is a topic that is closely related to functions. We will discuss it now. &lt;/p&gt;
&lt;p&gt;Question. What do we usually do if we are looking for remote control or for a sock to make a pair? :smile: We start with the couch (under the bed) and then after not finding it there we start looking around the table and then in the room and then in the whole house and then maybe, if you desperately need it, outside (with a bloody rage in your eyes already :sweat_smile:) So what if a computer needs something like a remote control? How does it work? Let’s have a look at a code&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;So how does the computer find the variable &lt;code&gt;a&lt;/code&gt; to console.log it. Just like you try to locate the remote control! When the computer is already informed that it is asked to print a, it will start looking for it. The first search is done within the first pair of curly braces the statement is in, then the second one is done in a bigger body, and this grows bigger until global &lt;code&gt;scope&lt;/code&gt;.  If it manages to find one, it will run the program, if not, it will give undefined.&lt;/p&gt;
&lt;p&gt;There are 3 types of scopes. &lt;code&gt;Functional&lt;/code&gt;, &lt;code&gt;global&lt;/code&gt; and &lt;code&gt;block&lt;/code&gt; scopes. Before &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;, there was no notion of block scope. let and const brought the idea of block scopes to the JS. So what’s the difference. The names may suggest some things but let’s talk about it in detail. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functional scope - This means that the search area widens function by function. If you call &lt;code&gt;a&lt;/code&gt;, it will look inside a function, and then if not found, maybe in the function that original function was declared in and so on. If it cannot find &lt;code&gt;a&lt;/code&gt; in any level though, it will go out to global scope.&lt;/li&gt;
&lt;li&gt;Block scope - This means that the search area widens block by block. As you may remember, block is anything that starts with &lt;code&gt;{&lt;/code&gt; and ends with &lt;code&gt;}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;_NOTE: The variables get destroyed as soon as the execution of the program leaves its scope. This means that if the &lt;code&gt;for&lt;/code&gt; loop is finished, all the &lt;code&gt;const&lt;/code&gt;s and &lt;code&gt;let&lt;/code&gt;s that were declared inside it (including the one declared in the parantheses after the keyword for) will be deleted.&lt;/p&gt;
&lt;p&gt;Let’s take a look at the examples to see how it works.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;someFunction&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Imagine this as going into rooms. For example here outside we have a box with &lt;code&gt;a&lt;/code&gt; written on it. We put 15 in it and move into someFunction room. In this room we also have a box with &lt;code&gt;a&lt;/code&gt; written on it. We put 8 in it. Now suppose a guy who was not outside wants to find an &lt;code&gt;a&lt;/code&gt;. Which one do you think it will find. The same logic applies to all the scopes, but the notion of room changes — in case of function — functions are rooms in case of blocks any &lt;code&gt;{}&lt;/code&gt; block is a room.&lt;/p&gt;
&lt;p&gt;Let’s figure out this example the same way. Keep in mind that &lt;code&gt;const&lt;/code&gt;s are block scoped. &lt;/p&gt;
&lt;h2&gt;Var&lt;/h2&gt;
&lt;p&gt;Now we have &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;, both are block scoped. There should be another way of declaring a variable for a functional scope. That way is called &lt;code&gt;var&lt;/code&gt;. The name &lt;code&gt;var&lt;/code&gt; comes from the word…  variable. The only difference is that it’s functionally scoped. Usually using &lt;code&gt;let&lt;/code&gt;s and &lt;code&gt;const&lt;/code&gt;s is better as it makes the code more readable and clear. Generally, for any variable, you need to keep its scope as small as possible. Not doing that will cause confusion and maybe some unwanted side effects. Have a soul, write good code please. &lt;/p&gt;
&lt;p&gt;Whatever, we need to talk about var anyways, as there is a bunch of legacy code that needs to be supported. Maybe one day you will encounter such code and work on it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;somefunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;</content:encoded></item><item><title><![CDATA[Javascript Loops]]></title><description><![CDATA[Loops This blog post is part of the posts series done for iterate hackerspace, explaining some of basic programming concepts implemented in…]]></description><link>https://yerevancoder.com/2018-02-13-js-loops/</link><guid isPermaLink="false">https://yerevancoder.com/2018-02-13-js-loops/</guid><pubDate>Tue, 13 Feb 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Loops&lt;/h1&gt;
&lt;p&gt;This blog post is part of the posts series done for iterate hackerspace, explaining some of basic programming concepts implemented in JavaScript.&lt;/p&gt;
&lt;h4&gt;Table of Contents&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#Introduction-What-are-loops&quot;&gt;What are loops&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#For-loop&quot;&gt;For Loop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.1 &lt;a href=&quot;#Special-for-loops-in-JS&quot;&gt;Special for loops in JS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#While-loops&quot;&gt;While Loop&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Introduction: What are loops?&lt;/h2&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What computers excel at is doing a lot of repetitive things in a short amount of time. Like imagine counting to 1000. While it will take you more than 5 minutes to do so, computers are able to do it in a small fraction of a second. Let’s see how long will it take to count to 1000 for a computer.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;We will return to this code 10 minutes later.&lt;/p&gt;
&lt;p&gt;So as we saw, computers are fast when doing the same action over and over. Besides being fast, usually you have a lot of similar data and you will find you in a situation where you want to change something on every or some elements of some “set” of data. These are just some of the use-cases of loops.&lt;/p&gt;
&lt;p&gt;There are different ways in different languages to create a loop. The most primitive one was &lt;code&gt;goto&lt;/code&gt; command. You can find it in ancient and low-level languages. Roughly speaking it just changed the line from where the code should execute after.&lt;/p&gt;
&lt;p&gt;In modern languages, there are other, better types of loops. The ones we have in JS are &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do ... while&lt;/code&gt; loops. There are also special loops for some data types. We will talk about those loops one by one. Allright, let’s get started.&lt;/p&gt;
&lt;h2&gt;For loop&lt;/h2&gt;
&lt;p&gt;For loop is probably the most common type of loop used in the actual code. The “classic” for loop consists of 3 parts - &lt;strong&gt;&lt;em&gt;Initialization&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Condition&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Increment&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As an analogy let’s pick a gym. Let’s say you went to the gym and you are doing squats. After doing one squat you add one to the number in your mind. Say you wanted to do 30 of them. You start counting from 1 and after each successful squat you add one to the count. In you mind you are doing exactly 3 things. You are starting a counter - in your memory you start counting from 1,  thinking of a condition of stopping - that’s when the number reaches 30 and also you give an increment by adding one.&lt;/p&gt;
&lt;p&gt;Let’s make this into a code.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;do_squat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The one little difference between a computer and a human is that computer(or better to say programmers) start counting from 0. This is more convenient as you will se later on.&lt;/p&gt;
&lt;p&gt;As you can see, there are 3 different parts inside the parantheses after the keyword &lt;code&gt;for&lt;/code&gt;. Each of those parts is divided from the others by ;-s
In the first part we see&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Here, as you may know, we initialize the variable. It’s like when you start your count from 1. In your memory you basically create a variable. This variable is used later to determine when the loop will stop exactly. After that we see:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;So this, as you can see, is a condition and is evaluated into either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. This condition is used to determine when exactly loop should stop. In our case it will stop as soon as i-s value is 30, which means we did 30 squats. The last part says:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This is used for incrementing the value of i (hence the name). It adds 1 to i after executing the &lt;strong&gt;body&lt;/strong&gt; of the for loop once, and makes sure that value of i will reach from 0 to 30 sooner or later. This is like when you stand up after a successful squat and add one to the number you were memorizing.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;NOTE:: Of course, we could have anything here that changes the value of i, like &lt;code&gt;i += 2&lt;/code&gt;, &lt;code&gt;i--&lt;/code&gt;, &lt;code&gt;i = i * 3&lt;/code&gt; etc.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We used the word &lt;strong&gt;body&lt;/strong&gt;. So what’s the body of this loop? It’s the part inside curly braces that are put after the parantheses. So in this particular case, the body is:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;do_squat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;We can put any legal operation inside those curly braces.
Let’s take a look at some legal but a little bit unusual for loops:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Forever loop
We can leave all the 3 parts of the for loop empty, thus not giving any condition of ending it. This creates a forever loop.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;I will not end&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This loop will do the same forever, which is as long as program runs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loop with 2 or 3 variables used
You can put as many initializations as you want in the first part, as many boolean expressions as you want in the second part, and as many increments in the third part as you want. Just don’t forget to seperate them by commas!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Look, I have two variables to use&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This loop has 2 initializations, 1 condition using those 2 and &lt;em&gt;increment&lt;/em&gt; for i plus &lt;em&gt;decrement&lt;/em&gt; for j;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Special for loops in JS&lt;/h3&gt;
&lt;p&gt;In 2015, 2 new versions of for loops were added to JS: &lt;code&gt;for .. in&lt;/code&gt; and &lt;code&gt;for .. of&lt;/code&gt; loops. This loops have only one part and this part includes initialization and the name of the list it will &lt;strong&gt;&lt;em&gt;iterate over&lt;/em&gt;&lt;/strong&gt;. Let’s take a look at them too:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;theList &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; theList&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// The output of this one will be:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 0 1 2 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;As you may notice, &lt;code&gt;for .. in&lt;/code&gt; loops over any Iterateable (Something that has executive, countable items) and on each step &lt;em&gt;assigns&lt;/em&gt; the key of the item to the variable. I think now you already have guessed what &lt;code&gt;for .. of&lt;/code&gt; will do.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;theList &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; theList&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// The output of this one will be:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 10 15 89 30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This loop does the same as &lt;code&gt;for .. in&lt;/code&gt; except instead of the keys it assigns the values to the variable.&lt;/p&gt;
&lt;h4&gt;A little tip&lt;/h4&gt;
&lt;p&gt;As you may have noticed, the special for loops are more human-readable and understandable. In almost all cases, you can change the old-style for loops with those &lt;code&gt;for .. in&lt;/code&gt; and &lt;code&gt;for .. of&lt;/code&gt; loops. This will make the code a little bit better for later maintenance. We will get back to optimizing the code a little bit later, after we get acquainted with special loops that are built-in for you in JS.&lt;/p&gt;
&lt;h2&gt;While loops&lt;/h2&gt;
&lt;p&gt;Today I am more into gym examples I guess :smile:
Let’s say you are still in the gym. It’s the last 15 minutes and you challenged yourself. You want to do push ups. How much? Well, as much as you can. Do you know how much exactly you can? I don’t think you know. You want to do push ups &lt;strong&gt;while&lt;/strong&gt; there is energy left in your hands to push you up. So there are cases when you need some other kind of loop, which only takes a condition and repeats the thing &lt;strong&gt;while&lt;/strong&gt; the condition is true. You don’t need to be too creative to guess the name that loop has.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;forceLeft &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;push_up&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;If only doing push-ups was this easy! :smile:&lt;/p&gt;
&lt;p&gt;As we already said, &lt;code&gt;while&lt;/code&gt; loop will loop over its &lt;em&gt;body&lt;/em&gt; &lt;strong&gt;while&lt;/strong&gt; some condition is true. It has the same syntax as &lt;code&gt;if&lt;/code&gt; conditional, which is:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The one thing worth mentioning here is that it will check the condition first, &lt;strong&gt;before&lt;/strong&gt; executing whatever is in its body. In contrary, there is a &lt;code&gt;do .. while&lt;/code&gt; loop, which will execute the body first and only &lt;strong&gt;after&lt;/strong&gt; doint that, check the condition. Roughly speaking, &lt;code&gt;do .. while&lt;/code&gt; will execute its body at least &lt;strong&gt;once&lt;/strong&gt;. Try executing this code:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// this will log 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h4&gt;Same code, a bunch of different ways.&lt;/h4&gt;
&lt;p&gt;Take a look at those 2 snippets:&lt;/p&gt;
&lt;p&gt;First one:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Second one:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;As you can see, those two do exactly the same. So what’s better. In this particular case, if we were forced to choose between two cases, we should choose the second version, because this particular case is a perfect fit for the &lt;code&gt;for&lt;/code&gt; loop. While is more likely to be used when the iteratable is not strictly determined, when you know that it only depends on some condition. You may use &lt;code&gt;while&lt;/code&gt; loop, for example, when getting data from the server. You don’t know exactly how much data you will get or when incoming data will stop. You just want to get it &lt;strong&gt;while&lt;/strong&gt; there is data left. To not really get too technical let’s write some non-real code to understand the use case of the &lt;code&gt;while&lt;/code&gt; loop;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;there is some data left on the server&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;the data we have got&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;We will turn this into actual code after we have some experience ;)&lt;/p&gt;
&lt;p&gt;We wrap it up here. Loops are a powerful concept and evey programmer should know it. It may be a little tough for complete beginners, but once you have a little experience, you slowly start to get it and do it more easily. Hope you enjoyed the post.&lt;/p&gt;
&lt;p&gt;The next post will be in 2 days!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JavaScript. Boolean expressions, conditionals and more.]]></title><description><![CDATA[Primitives 2 This blog post is part of the posts series done for iterate hackerspace, explaining some of basic programming concepts…]]></description><link>https://yerevancoder.com/2018-02-10-js-boolean-expressions-and-conditionals/</link><guid isPermaLink="false">https://yerevancoder.com/2018-02-10-js-boolean-expressions-and-conditionals/</guid><pubDate>Sat, 10 Feb 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Primitives 2&lt;/h1&gt;
&lt;p&gt;This blog post is part of the posts series done for iterate hackerspace, explaining some of basic programming concepts implemented in JavaScript.&lt;/p&gt;
&lt;h5&gt;Table of contents&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;#logical-operators&quot;&gt;Logical Operators&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#and-ampamp&quot;&gt;AND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#or-&quot;&gt;OR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#not-&quot;&gt;NOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#truthy-falsey&quot;&gt;Truthiness and Falsiness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#short-circuit&quot;&gt;Short-circuit evaluation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;#if-else&quot;&gt;&lt;code&gt;if&lt;/code&gt; statements&lt;/a&gt;
&lt;a href=&quot;#switch&quot;&gt;Switch&lt;/a&gt;
&lt;a href=&quot;&quot;&gt;Further reading&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Logical Operators&lt;/h2&gt;
&lt;p&gt;In programming as in real life, you will usually find yourself in a situation when some decision
changes the flow of things. The program may do something instead of doing something else depending
on some &lt;code&gt;condition&lt;/code&gt;. Usually those conditions are evaluated to a &lt;code&gt;boolean&lt;/code&gt; value either &lt;code&gt;true&lt;/code&gt; or
&lt;code&gt;false&lt;/code&gt; Let’s think of a real life example to understand this. Let’s say you want to wear your short
sleeve T-shirt today. As you don’t want to catch cold or something you will probably wear it only
&lt;code&gt;if&lt;/code&gt; the temperature outside is greater than 10 degrees celsius. Otherwise you will wear your hoodie
instead. In this case the condition is the following.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;Temperature &gt;= 10&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This will be either true or false, depending on the temperature.  In programming terminology these
decisions, depending on some values are called &lt;code&gt;logical expressions&lt;/code&gt; or &lt;code&gt;boolean expressions&lt;/code&gt;. As we
mentioned before, those expressions will evaluate to a &lt;code&gt;Boolean&lt;/code&gt; - &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now let’s take the same example and make it a little bit more complicated. Suppose you also want to
wear sunglasses to look cooler. Now, if you wear sunglasses when it’s rainy it may make you look
cooler but a little bit strange instead :laughing: So that’s why you may want to wear sunglasses
only if there’s sunny weather.&lt;/p&gt;
&lt;p&gt;Now the question. In which case you may want to wear &lt;strong&gt;both&lt;/strong&gt; your favorite T-Shirt and
sunglasses. The answer is&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;Temperature &gt;= 10 AND Weather === &quot;Sunny&quot;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;As you might have guessed already, those &lt;strong&gt;&lt;em&gt;connecting&lt;/em&gt;&lt;/strong&gt; operators, such as AND, OR and so on, also
have a special name. Those are called &lt;code&gt;logical operators&lt;/code&gt; or sometimes referred as &lt;code&gt;boolean operators&lt;/code&gt;. We will learn about three of them - AND &lt;strong&gt;(&amp;#x26;&amp;#x26; in JS)&lt;/strong&gt;, OR &lt;strong&gt;(|| in JS)&lt;/strong&gt; and NOT &lt;strong&gt;(!
in JS)&lt;/strong&gt;. Those notations are usually the same for the majority of languages but it is subject of
change depending on the language&lt;/p&gt;
&lt;p&gt;Before diving into code, let’s bring some other examples to make this clearer.  Most people know,
that computers do calculation by adding bunch of 0s and 1s. It’s like having a room full of people,
where each person evaluates only one value, giving one result, &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Having only one
person doing this is not quiet usefull, but add more people, and the ‘computational power’ of the
room will grow exponentially. Moreover, assign a person a specific way of evaluation, and you will
have powerful, yet simple way of calculating different results. This lays in the basis of computer
architecture and is based on so called &lt;code&gt;boolean algebra&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We do this kind of comparisons every day. For example, when searching for a hotel, we filter results
by certain criteria, like we want the hotel to have 5 &lt;code&gt;or&lt;/code&gt; 4 stars, &lt;code&gt;not&lt;/code&gt; to allow smoking&lt;code&gt;and&lt;/code&gt; be
kid-friendly. The search result will give all 5 and 4 star hotels, will include kid friendly hotels,
but won’t show hotels where smoking is allowed.  Now let’s take a look at how these logical
operations are represented and implemented in JavaScript.&lt;/p&gt;
&lt;h3&gt;AND (&amp;#x26;&amp;#x26;)&lt;/h3&gt;
&lt;p&gt;AND operator returns &lt;code&gt;true&lt;/code&gt; only if both operands are true, otherwise, it returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Value 1&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Value 2&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Returns&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;true&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;true&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;t &amp;#x26;&amp;#x26; t&lt;/code&gt;
 - true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;true&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;false&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;t &amp;#x26;&amp;#x26; f&lt;/code&gt;
 -  false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;false&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;false&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;f &amp;#x26;&amp;#x26; f&lt;/code&gt;
 - false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;false&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;(3 &gt; 5 )&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;f &amp;#x26;&amp;#x26; f&lt;/code&gt;
 - false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;‘str1’&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;‘str2’&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;t &amp;#x26;&amp;#x26; t&lt;/code&gt;
 - str2 (weird JS)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;‘str’&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;false&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;t &amp;#x26;&amp;#x26; f&lt;/code&gt;
 - false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;OR (||)&lt;/h3&gt;
&lt;p&gt;OR operator &lt;code&gt;true&lt;/code&gt; in all cases of comparing boolean operands except &lt;code&gt;false &amp;#x26;&amp;#x26; false&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Value 1&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Value 2&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Returns&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;true&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;true&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;t || t&lt;/code&gt;
 - true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;true&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;false&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;t || f&lt;/code&gt;
 -  true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;false&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;false&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;f || f&lt;/code&gt;
 - false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;false&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;(3 &gt; 5 )&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;f || f&lt;/code&gt;
 - false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;‘str1’&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;‘str2’&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;t || t&lt;/code&gt;
 - str1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;false&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;‘str’&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;t || f&lt;/code&gt;
 - ‘str’&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;‘str’&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;true&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;code&gt;t || t&lt;/code&gt;
 - ‘str’&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;NOT (!)&lt;/h3&gt;
&lt;p&gt;NOT operator returns &lt;code&gt;true&lt;/code&gt; in all cases, except the case if its single operand can be converted to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;!true&lt;/code&gt; - returns &lt;code&gt;false&lt;/code&gt;
&lt;code&gt;!false&lt;/code&gt; - returns &lt;code&gt;true&lt;/code&gt;
&lt;code&gt;!&apos;str&apos;&lt;/code&gt; - returns &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Truthiness and Falsiness&lt;/h3&gt;
&lt;p&gt;In case of &lt;code&gt;NOT&lt;/code&gt; operand we saw a weird thing. We called !‘str’ and got the value &lt;code&gt;false&lt;/code&gt;. This may
suggest, that there is a “hidden” boolean value connected to ‘str’. How can you get that using !
operator? You can use it twice, to negate the opposite boolean value given by !‘str’. So, in case of
‘str’ it’s “hidden” boolean value is true. How does this happen? It’s because JS &lt;code&gt;!&lt;/code&gt; operator
&lt;code&gt;converts&lt;/code&gt; the type of it’s &lt;code&gt;operand&lt;/code&gt; to Boolean and then negates that resulting value. That’s why
some of values in JS are &lt;code&gt;truthy&lt;/code&gt;, which means they are corresponding to boolean value &lt;code&gt;true&lt;/code&gt; and
some of them are &lt;code&gt;falsy&lt;/code&gt;. Usually, emptiness corresponds to &lt;code&gt;false&lt;/code&gt; while any other value
corresponds to &lt;code&gt;true&lt;/code&gt;. Let’s look at some examples.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;&apos; is falsy&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;a&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;a&apos; is truthy&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 0 is falsy&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// -4 is truthy, even if it&apos;s negative, because it&apos;s not empty&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;NaN&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// NaN is falsy&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// null is falsy&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// null means emptiness, the absence of the object, while empty object is still an object. it&apos;s just empty.&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// This can be more treated like {}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;undefined &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Not defined, not there =&gt; falsy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;So as you see, usually the values that are used to describe the absence are falsy and the others are
truthy. It’s a bit philosophical and this is how programming is beautiful. :smile:&lt;/p&gt;
&lt;p&gt;_NOTE::: The return values of the &lt;code&gt;&amp;#x26;&amp;#x26;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; operators are &lt;strong&gt;not&lt;/strong&gt; necessarily &lt;code&gt;Boolean&lt;/code&gt; values,
as they can be used with operands that are not booleans, however they can still be considered
&lt;code&gt;Boolean&lt;/code&gt; operators since their return values can always be converted to &lt;code&gt;truthy/falsey&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;This means that in some cases we may use &amp;#x26;&amp;#x26; but get results of other type. Some examples are_&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;I will be evaluated&apos;&lt;/span&gt;
&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;I will be evaluated&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;Short-circuit evaluation&lt;/h3&gt;
&lt;p&gt;Let’s suppose we have a long chain of boolean operators combined.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;Condition1 &amp;&amp; Condition2 &amp;&amp; Condition3 &amp;&amp; ... &amp;&amp; Condition N&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;As you know already, &lt;code&gt;AND&lt;/code&gt; evaluates to true if and only if both values are true. It’s easy to
understand that in the general case, like the one shown above, that means that the expression will
evaluate to &lt;code&gt;true&lt;/code&gt; if and only if &lt;strong&gt;ALL&lt;/strong&gt; the presented boolean values are true. Let’s again bring a
real life analog for this.&lt;/p&gt;
&lt;p&gt;Suppose a kid is happy if a kid has got a candy. Now suppose we have N kids in a row and we want to
know if all of them are happy. What will you do as a human? You will go one by one starting from the
first and ask if the current kid has a candy. What if you noticed a kid in the middle somewhere with
no candy? Does it have any meaning to continue with the other kids or seeing just this one with no
candy means that our assumption of all kids having a candy is wrong (or, as programmers may say,
evaluated to &lt;code&gt;false&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;So seing just 1 kid not having a candy is already enough to end the search. This is exactly how the
program will evaluate the long chain of boolean values connected with &lt;code&gt;&amp;#x26;&amp;#x26;&lt;/code&gt;-s. It may as well just
stop searching as soon as it sees some &lt;code&gt;falsy&lt;/code&gt; value in the chain and return that &lt;code&gt;falsy&lt;/code&gt; value. If
there is no any &lt;code&gt;falsy&lt;/code&gt; value it will evaluate to the last value presented in chain. Let’s take a
look at some code to get this clearer.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;true &amp;&amp; true &amp;&amp; true &amp;&amp; false &amp;&amp; true &amp;&amp; true // returns false, stops evaluation as soon as sees the false value
&apos;Truthy value&apos; &amp;&amp; 0 &amp;&amp; true // returns 0 because it&apos;s falsey
undefined &amp;&amp; null &amp;&amp; 1 &amp;&amp; 0 &amp;&amp; &apos;xoxo&apos; // stops as soon as sees the very first undefined, look how the all unnecessary long calculation is left behind.&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Now your turn!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;true &amp;&amp; true &amp;&amp; &apos;&apos; &amp;&amp; true &amp;&amp; true
&apos;I am the first&apos; &amp;&amp; &apos;I am the second&apos; &amp;&amp; &apos;Latter the greater&apos;
&apos;Some string&apos; &amp;&amp; 5 &amp;&amp; null &amp;&amp; undefined
10 &amp;&amp; 9 &amp;&amp; 8 &amp;&amp; 7 &amp;&amp; 6 &amp;&amp; 5 &amp;&amp; 4 &amp;&amp; 3 &amp;&amp; 2 &amp;&amp; 1 &amp;&amp; 0
10 &amp;&amp; 9 &amp;&amp; 8 &amp;&amp; 7 &amp;&amp; 6 &amp;&amp; 5 &amp;&amp; 4 &amp;&amp; 3 &amp;&amp; 2 &amp;&amp; 1
0 &amp;&amp; 9 &amp;&amp; 8 &amp;&amp; 7 &amp;&amp; 6 &amp;&amp; 5 &amp;&amp; 4 &amp;&amp; 3 &amp;&amp; 2 &amp;&amp; 1 &amp;&amp; 0&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The same logic applies to OR operator, as it evaluates to true if &lt;strong&gt;at least one&lt;/strong&gt; of the &lt;code&gt;operands&lt;/code&gt;
is true. Can you explain how will OR work?  Can you also answer those correctly?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;false || undefined || &apos;Haha&apos; || 0
&apos;false&apos; || &apos;Don&apos;t be tricked&apos; || 0 || undefined || &apos;many others&apos;
&apos;I am the first&apos; || &apos;I am the second&apos; || &apos;Latter the greater?&apos;
0 || 1 || 2 || 3 || 4 || 5 || 6 || 7 || 8 || 9 || 10
1 || 2 || 3 || 4 || 5 || 6 || 7 || 8 || 9 || 10 || 0&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;if statements&lt;/h3&gt;
&lt;p&gt;Now, after we got so far with boolean expressions, we can put them into usage in the actual
code. Remember the example of wearing a T-Shirt and sunglasses. You may notice that with the two
conditions we have we can create different &lt;code&gt;boolean expressions&lt;/code&gt; and change the flow of the program
depending on those. One question remaining is where to put those boolean expressions exactly. There
are several places where you need to insert boolean expressions and the simplest two of them are
&lt;code&gt;if&lt;/code&gt; and &lt;code&gt;switch&lt;/code&gt; &lt;code&gt;statements&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s start with &lt;code&gt;if&lt;/code&gt; statements. It’s as simple as you may guess.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;if (Some boolean expression here) {
    // Things that need to be done if the expression evaluates to true
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;So we use the keyword &lt;code&gt;if&lt;/code&gt; and then after it we put parantheses and write our boolean expression
there. Then we open the body of the statement with &lt;code&gt;{&lt;/code&gt; and close it with &lt;code&gt;}&lt;/code&gt;. In case of our T-Shirt
sunglass example it will be something like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;temperature &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; weather &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;sunny&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;wear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cool_tshirt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;wear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sunglasses&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Now, this is too limited. Usually you make decision for both cases, not only if the condition is
true. You do something &lt;code&gt;else&lt;/code&gt; if the condition is not true. In case of JS, you can do this by using
the word? &lt;code&gt;else&lt;/code&gt; :smile: So now we can make the example more complete including the case of wearing
hoodie.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;temperature &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; weather &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;sunny&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;wear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cool_tshirt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;wear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sunglasses&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;wear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;warm_hoodie&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Okay, this is cool but it’s also limited. What if I want to make more than 2 choices depending on
the conditions. What if it’s below -15 outside? Warm hoodie is not enough to not freeze in that
situation. We need some other case. How to do it? Just add onther if after else to get &lt;code&gt;else .. if&lt;/code&gt;
statement. Using &lt;code&gt;else .. if&lt;/code&gt; we can specify as many cases as we want.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;temperature &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; weather &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;sunny&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;wear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cool_tshirt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;wear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sunglasses&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;temperature &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;wear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;warm_coat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;wear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;warm_hoodie&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;wear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;scarf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;wear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;wear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;warm_socks&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Granny was here :)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;wear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;warm_hoodie&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Okay, let’s take a look at another example. You remember Teenage Mutant Ninja Turtles right? Now we
want to write a program that will output the corresponding Turtle name given the color of its
mask. For those who don’t know Teenage Mutant Ninja Turtles, here is the list.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;Leonardo is wearing a blue mask
Raphael is wearing a red mask
Michelangelo is wearing an orange mask
Donatello is wearing a purple mask&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Okay let’s do this.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;color &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;blue&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Leonardo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;color &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;red&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Raphael&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;color &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;orange&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Michelangelo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Donatello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This code works, but it has a small bug. Can you spot it? The more correct code would be.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;color &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;blue&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Leonardo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;color &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;red&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Raphael&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;color &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;orange&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Michelangelo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Donatello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This piece of code is long and hard to read. That’s why we have &lt;code&gt;switch&lt;/code&gt; statement, which is used exactly for cases like this one.&lt;/p&gt;
&lt;h3&gt;Switch&lt;/h3&gt;
&lt;p&gt; So, as we’ve already said, &lt;code&gt;switch&lt;/code&gt; provied a better way to write the better readable code doing
the same thing as the example above does. &lt;code&gt;switch&lt;/code&gt; is useful when you have some variable and for
each &lt;code&gt;case&lt;/code&gt; of the value you want to do something. It won’t work with and or anything, it’s used to
branch the program depending just on a value of a single variable. Look how much the readability is
increased, keeping the same functionality as the above code.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;blue&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Leonardo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;red&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Raphael&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;orange&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Michelangelo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;purple&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&apos;Donatello&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
       console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Have you even seen TMNT???&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt; Let’s see what’s new in this code.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Keyword switch - we put the keyword and then again open parantheses. This time in paranteses we specify the &lt;code&gt;variable&lt;/code&gt; for which we will switch the cases.&lt;/li&gt;
&lt;li&gt;Keyword case - in the body of the switch (the block starting with &lt;code&gt;{&lt;/code&gt; and ending with &lt;code&gt;}&lt;/code&gt;) we see multiple &lt;code&gt;case&lt;/code&gt; statements. We use &lt;code&gt;case&lt;/code&gt; to specify a certain probable value, a guess of the value of the variable.&lt;/li&gt;
&lt;li&gt;Logic after the case - after the case value is specified, we put &lt;code&gt;:&lt;/code&gt; and start to write the logic of the things that needs to be done if the value of the variable matches with that certain case.&lt;/li&gt;
&lt;li&gt;break statement - The thing is that JS kinda does not differentiate the cases, so whenever some cases matches, it will start to execute the code of &lt;strong&gt;ALL&lt;/strong&gt; the cases below the match case (You are adviced now to try to delete the break-s and see what happens). To prevent this we use &lt;code&gt;break&lt;/code&gt; keyboard to exit the switch statement. Sometimes that auto-executing thing may be useful, sometimes it creates problems. We will see a case when it’s useful a little bit later.&lt;/li&gt;
&lt;li&gt;default case - This is a special case using the keyword &lt;code&gt;default&lt;/code&gt; that will handle the case when none of the “guesses” of the value were right. In this case, if the color is something else than ‘red’, ‘blue’, ‘orange’ or ‘purple’, it will execute the code inside default case.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It may happen that you want to do the same thing in multiple cases. Let’s say we get the name of the
month and we want to output the weather of that month. So ‘july’ will output ‘summer’, ‘december’
will output ‘winter’ and so on. Instead of writing 12 case bodies, we can take advantage of that
auto-execution of cases and write just 4 like this.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;monthName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;December&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;January&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;February&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;It&apos;&lt;/span&gt;s winter&apos;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;March&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;April&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;May&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;It&apos;&lt;/span&gt;s spring&apos;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;June&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;July&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;August&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;It&apos;&lt;/span&gt;s summer&apos;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;September&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;October&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;November&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;It&apos;&lt;/span&gt;s autumn&apos;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;There is no such month!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;So this is the basics of branching the program. Next time we will learn about loops, one of the most
powerful things that computer and programming languages provide.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Javascript. Types, Primitives and Variable Initialization]]></title><description><![CDATA[Primitives What is data type?  A data type is a classification that specifies which type of value
a  variable  has and what type of…]]></description><link>https://yerevancoder.com/2018-02-08-js-types-primitives-variable-initialization/</link><guid isPermaLink="false">https://yerevancoder.com/2018-02-08-js-types-primitives-variable-initialization/</guid><pubDate>Thu, 08 Feb 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Primitives&lt;/h2&gt;
&lt;p&gt;What is data type? &lt;/p&gt;
&lt;p&gt;A data type is a classification that specifies which type of value
a &lt;code&gt;variable&lt;/code&gt; has and what type of operations
can be applied to it without causing an error.&lt;/p&gt;
&lt;p&gt;You can read it a few times to understand. Anyway, it is fine
if you’ll not understand it now :D&lt;/p&gt;
&lt;p&gt;So we can store and use different data types in our program: strings,
numbers and etc.&lt;/p&gt;
&lt;p&gt;Let’s list those!&lt;/p&gt;
&lt;p&gt;Primitives:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;number&lt;/li&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;li&gt;symbol (new to ES6)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Object:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The examples of objects are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Function&lt;/li&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;li&gt;Map&lt;/li&gt;
&lt;li&gt;Set&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So basically, everything that is not an object is considered as a
Primitive data type. Smart right? :D There are a lot of differences
between those and we’re going to understand everything together! For
today, we’ll focus our attention on primitive types.&lt;/p&gt;
&lt;p&gt;Let’s get some practice already!&lt;/p&gt;
&lt;p&gt;if you’ve been on our installation day, then most probably you have
UNIX-based Operating System (Ubuntu, MacOS, Debian, Kali, BSD, etc.).
You already should have &lt;code&gt;atom&lt;/code&gt; and &lt;code&gt;node&lt;/code&gt;. Let’s setup our workplace.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;# go to Documents directory&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; ~/Documents
&lt;span class=&quot;token comment&quot;&gt;# create js file&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; file.js
&lt;span class=&quot;token comment&quot;&gt;# open that file with Atom&lt;/span&gt;
atom file.js
&lt;span class=&quot;token comment&quot;&gt;# now we are going to edit that file&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# with atom. After edit, you can run that&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# file with&lt;/span&gt;
node file.js
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;OR&lt;/p&gt;
&lt;p&gt;Open your Unix terminal and type &lt;code&gt;node&lt;/code&gt;. However, this is not convenient
for writing everything that is bigger than a few lines:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;# open node&lt;/span&gt;
node
&lt;span class=&quot;token comment&quot;&gt;# now you should this kind of &quot;arrow&quot;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# that means you can write js here&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# then push &quot;enter&quot; to evaluate the code&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# to quit it simply do 2 times CTRL+C&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# or write .exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;OR&lt;/p&gt;
&lt;p&gt;open &lt;code&gt;developer tools&lt;/code&gt; in the browser and open console there.&lt;/p&gt;
&lt;p&gt;So now let’s start with numbers. To use those you simply have to type a
number in the console:&lt;/p&gt;
&lt;h3&gt;number&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;I’m using a symbol &lt;code&gt;//&lt;/code&gt; called &lt;code&gt;comments&lt;/code&gt;. Basically, JS doesn’t
evaluate everything that is after &lt;code&gt;//&lt;/code&gt; on the line. It is a very useful
thing when you want to describe what your code does.&lt;/p&gt;
&lt;p&gt;JS is not going to evaluate this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;// yo, I&apos;m not evaluated&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// :(&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;So we tried to evaluate 5 and JS evaluated that to 5. Simple!&lt;/p&gt;
&lt;p&gt;let’s try to do some math operations! To use those you have to just
type mathematical operation symbols:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;// sum&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: 10&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// substraction&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: -3&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// deletion&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: 5&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3.5&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to 3.5&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// multiplication&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: 20&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3.5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2.5&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: 8.75&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;JS also has a special value called &lt;code&gt;NaN&lt;/code&gt; which basically means &lt;code&gt;Not A Number&lt;/code&gt;. We are going to discuss it later in the course.&lt;/p&gt;
&lt;h3&gt;string&lt;/h3&gt;
&lt;p&gt;But you’ll not be able to do a lot of things with only numbers!
Let’s try to use text. The data type responsible for that in JS is
called &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are few ways of declaring a string. We will only review 2 of
those:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello world!&apos;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: &apos;Hello world!&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: &apos;Hello world!&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;There are also some operations which are performed on strings. Here is
the one called &lt;code&gt;concatenation&lt;/code&gt;. Basically, that means adding one string
to another:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;// concatenation&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;world!&apos;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: &apos;Hello world!&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;boolean&lt;/h3&gt;
&lt;p&gt;Next data type I want to talk about is very simple. It’s called
&lt;code&gt;boolean&lt;/code&gt;. It only has values &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: false&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;In JS and in the majority of other programming languages you are able
to compare different values and get a &lt;code&gt;boolean&lt;/code&gt; value as a result of
evaluation:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;// equal&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: true&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// equal&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: false&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// not equal&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: true&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// not equal&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: false&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// less than&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: true&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// less than&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: false&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// less than or equal&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: true&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// less than or equal&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;343&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: true&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// greater than&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: true&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// greater than&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: false&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// greater than or equal&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; 
&lt;span class=&quot;token comment&quot;&gt;// evaluated to: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Javascript also has &lt;code&gt;==&lt;/code&gt; as an equality operator. It’s a convention to
say that &lt;code&gt;==&lt;/code&gt; is a loose-equal and &lt;code&gt;===&lt;/code&gt; is a strict-equal. For now just
don’t use &lt;code&gt;==&lt;/code&gt;, use &lt;code&gt;===&lt;/code&gt; for checking equality. We will describe the
difference later in the course.&lt;/p&gt;
&lt;h3&gt;undefined and null&lt;/h3&gt;
&lt;p&gt;We also can use it for any other data type, but that’s something that
we would like to discuss later in the course :D &lt;/p&gt;
&lt;p&gt;JS also has data types that basically mean &lt;code&gt;nothing&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The first one, &lt;code&gt;undefined&lt;/code&gt;, means the absence of the value, whereas
&lt;code&gt;null&lt;/code&gt; means that value is nothing. It maybe confusing at first but
you’ll get used to it!&lt;/p&gt;
&lt;p&gt;We can also use boolean operators on these data types:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code&gt;undefined &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; undefined &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&apos;hello&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;hello&apos;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;symbol&lt;/h3&gt;
&lt;p&gt;We are not going to cover &lt;code&gt;symbol&lt;/code&gt; data type now. It’s a little bit
advanced topic that we’ll talk about in a few weeks.&lt;/p&gt;
&lt;p&gt;Great, so now we know how Primitive data types look and we also know a
few basic operations on those!&lt;/p&gt;
&lt;h2&gt;Variable initialization&lt;/h2&gt;
&lt;h3&gt;let&lt;/h3&gt;
&lt;p&gt;Now we need to understand where we can store that value. Imagine a
&lt;code&gt;box&lt;/code&gt; where you can put anything you want. That &lt;code&gt;box&lt;/code&gt; in JS is called a
&lt;code&gt;variable&lt;/code&gt;. You basically can put any JS data type in it. There are a
few ways of initializing a variable. The first way is using &lt;code&gt;let&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;// initialized a variable called a&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Now we just initialized a &lt;code&gt;variable&lt;/code&gt; which has a value of nothing. As
we’ve already discussed, a value of nothing in JS is represented as
&lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; undefined
&lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Now let’s put some value in it:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 5&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Congratulations! Now we have &lt;code&gt;number&lt;/code&gt; 5 in the &lt;code&gt;variable&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;.
We can also change the value of &lt;code&gt;a&lt;/code&gt; to string.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;string&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;In the majority of programming languages, you are actually not able to
do so. There you initialize a &lt;code&gt;variable&lt;/code&gt; and tell it to ONLY store one
data type. It is also possible in Javascript, but for that, you have to
use &lt;code&gt;TypeScript&lt;/code&gt; or &lt;code&gt;Flow&lt;/code&gt;. We are going to cover it later in the
course. For now, you can just google it! :D &lt;/p&gt;
&lt;h3&gt;const&lt;/h3&gt;
&lt;p&gt;As you’ve already found out, when we initialize a &lt;code&gt;variable&lt;/code&gt; with &lt;code&gt;let&lt;/code&gt;
we are able to change the value that is stored in the &lt;code&gt;variable&lt;/code&gt;!! In
this course, we are going to mostly learn Functional Programming. And
functional programming doesn’t like mutatable (changeable) variables!
Thus it’s always better to use &lt;code&gt;const&lt;/code&gt;, which stands for &lt;code&gt;constant&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 5&lt;/span&gt;
b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// TypeError: Assignment to constant variable.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;and using &lt;code&gt;let&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 6&lt;/span&gt;
c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Totally fine, evaluated to: 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This helps you to keep your mind organized and get fewer bugs in the
program later in the development process!&lt;/p&gt;
&lt;h3&gt;typeof&lt;/h3&gt;
&lt;p&gt;Also, Javascript provides a special operator called &lt;code&gt;typeof&lt;/code&gt; that
describes you what type is in the variable right now. The output of
that operator is always &lt;code&gt;string&lt;/code&gt;. This is how to use it:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; first&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; first&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                &lt;span class=&quot;token comment&quot;&gt;// &quot;undefined&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; second &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; second&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                &lt;span class=&quot;token comment&quot;&gt;// &quot;string&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; third &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; third&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                &lt;span class=&quot;token comment&quot;&gt;// &quot;number&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fourth &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; fourth&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                &lt;span class=&quot;token comment&quot;&gt;// &quot;boolean&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fifth &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; fifth&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                &lt;span class=&quot;token comment&quot;&gt;// &quot;object&quot; -- weird, bug&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sixth &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; undefined&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; sixth&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                &lt;span class=&quot;token comment&quot;&gt;// &quot;undefined&quot;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// this is object, hence not a Primitive data type&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// we will study it in the upcoming lectures&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; seventh &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;c&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; seventh&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                &lt;span class=&quot;token comment&quot;&gt;// &quot;object&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;console.log()&lt;/h3&gt;
&lt;p&gt;Sometimes you want your program output something on the screen. For
that, you can use &lt;code&gt;console.log()&lt;/code&gt;. It is a &lt;code&gt;function call&lt;/code&gt; (will get to
it later), which lets you output the value to the screen. Let’s try
this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; hello &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;helloWorld!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; hey &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Yo!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hello&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hey&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;OMG&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;and the output is something like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;helloWorld&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
Yo&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
OMG
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;Assignment operator shortcuts&lt;/h3&gt;
&lt;p&gt;The majority of programming languages have some kind of &lt;code&gt;shortcuts&lt;/code&gt; for
arithmetic operations. Let’s review some of those:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// add 1 to a&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 6&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// here you can use any arithmetic operation in cooperation with =&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// e.g. += , -=, /=, *=, etc...&lt;/span&gt;
b &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// add 1 to the value of b and put the updated value back to b&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 11&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// increments c by 1&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 3&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// we also can do &lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// c++;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// that increments the value of c by 1&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// but it does it in the other way.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// We will describe it later in the course!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;p&gt;Don’t forget that you can always reach members of the iterate community
ask questions, fix issues and bugs, also just talk about random things
in the iterate Slack &lt;a href=&quot;https://iterate-hackerspace.slack.com/messages&quot;&gt;channel&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Simple Terminal Commands]]></title><description><![CDATA[Documentation Readers, I spent a lot of time to add as many examples as I can to this documentation So I will highly encourage to read this…]]></description><link>https://yerevancoder.com/2018-02-06-simple-terminal-commands/</link><guid isPermaLink="false">https://yerevancoder.com/2018-02-06-simple-terminal-commands/</guid><pubDate>Tue, 06 Feb 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Readers, I spent a lot of time to add as many examples as I can to this documentation&lt;/p&gt;
&lt;p&gt;So I will highly encourage to read this one day :D &lt;/p&gt;
&lt;p&gt;But I also advise you to first read Lecture notes
section and then the Documentation one!&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;cd&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;cd - Change Directory&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;change the current working directory to a specific Folder.&lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Options&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Directory&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;OPTIONS&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;-P    Do not follow symbolic links
-L    Follow symbolic links (default)&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;EXAMPLES&lt;/h2&gt;
&lt;p&gt;Move to the sybase folder:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; /usr/local/sybase
$ &lt;span class=&quot;token function&quot;&gt;pwd&lt;/span&gt;
/usr/local/sybase
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Change to another folder:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; /var/log
$ &lt;span class=&quot;token function&quot;&gt;pwd&lt;/span&gt;
/var/log
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Quickly get back:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; - 
$ &lt;span class=&quot;token function&quot;&gt;pwd&lt;/span&gt;
/usr/local/sybase
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;move up one folder:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;pwd&lt;/span&gt;
/usr/local/
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Back to your home folder&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;pwd&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;pwd - Print Working Directory&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;print name of the current/working directory &lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-LP&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;OPTIONS&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;-P  : The pathname printed will not contain symbolic links.
-L  : The pathname printed can contain symbolic links&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The default action is to show the current folder as an absolute path.
All components of the path will be actual folder names - none will be symbolic links.&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;ls&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;ls - list directory contents&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;List information about  the FILEs (the current directory by default).&lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;p&gt;the most common command:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;the same command in the general form:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;$ ls [OPTION]... [FILE]...&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;OPTIONS&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;-a, --all   List all entries including those starting with a dot.
-l   Use a long listing format (shows file or directory, size, modified date and time, file or folder name and owner of a file and it’s permission)
-lh   Same as -l, but shows sizes in human readable format.
-F     Add the ‘/’ Character at the end each directory.
-r  Display files and directories in reverse order.
-R  Recursively list Sub-Directories
-ltr (VERY USEFUL) Shows latest modification file or directory date as last.
-lS  (VERY USEFUL) Displays file size in order, will display big in size first.
--help  Show help page, not everything is described here!&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;EXAMPLES&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;# List the contents of your home directory&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; ~

&lt;span class=&quot;token comment&quot;&gt;# list everything in a vertical list:&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -al

total 109
drwxr-xr-x  18 root     root         4096 Jun  9 21:12 ./
drwxr-xr-x  18 root     root         4096 Jun  9 21:12 &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;/
drwxr-xr-x   2 root     root         4096 Jun  9 21:14 bin/
drwxr-xr-x   3 root     root         1024 Jun  9 20:32 boot/
drwxr-xr-x   6 root     root        36864 Jul 12 10:26 dev/
drwxr-xr-x  34 root     root         4096 Jul 12 10:25 etc/
^
&lt;span class=&quot;token comment&quot;&gt;# the first column is the file type &lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# d = directory&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# f = file&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# List the directories in the current directory:&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -d */

&lt;span class=&quot;token comment&quot;&gt;# list ALL subdirectories&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; *
&lt;span class=&quot;token comment&quot;&gt;# The default behavior of ls is to only pass color control codes to tty output --color=auto.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# To pipe the output to a second command complete with color codes then set --color=always&lt;/span&gt;

$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -lAXh --color&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;auto&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;less&lt;/span&gt; -R
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;mkdir&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;mkdir - make directories&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;Create the DIRECTORY(ies), if they do not already exist.&lt;/p&gt;
&lt;p&gt;Mandatory  arguments  to  long  options are mandatory for short options
too.&lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Options&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; folder&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

$ &lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Name with spaces&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;OPTIONS&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;-m, --mode=MODE   set permission mode (as in chmod), not rwxrwxrwx - umask
-p, --parents     no error if existing, make parent directories as needed
-v, --verbose     print a message for each created directory&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;touch&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;touch - change file timestamps&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;Update the access and modification times of each FILE to the current time.&lt;/p&gt;
&lt;p&gt;A FILE argument that does not exist is created empty, unless -c  or  -h is supplied.&lt;/p&gt;
&lt;p&gt;A  FILE argument string - is handled specially and causes touch to change the times of the file associated with standard output.&lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;options&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. File&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;OPTIONS&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;-a, change only the access time

-c, --no-create, do not create any files

-d, --date=STRING, parse STRING and use it instead of current time

-f, (ignored)

-h, --no-dereference, affect each symbolic link instead of any referenced file (useful only on systems that can change the timestamps of a symlink)

-m, change only the modification time

-r, --reference=FILE, use this file&apos;s times instead of current time

-t STAMP, use [[CC]YY]MMDDhhmm[.ss] instead of current time

--time=WORD, change the specified  time:  WORD  is  access,  atime,  or  use: 
equivalent to -a WORD is modify or mtime: equivalent to -m

--help display this help and exit

--version,  output version information and exit&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Note that the -d and -t options accept different time-date formats.&lt;/p&gt;
&lt;h2&gt;DATE STRING&lt;/h2&gt;
&lt;p&gt;The  —date=STRING  is  a mostly free format human readable date string
such as “Sun, 29 Feb 2004 16:21:42 -0800” or “2004-02-29  16:21:42”  or
even  “next  Thursday”.&lt;/p&gt;
&lt;p&gt;A date string may contain items indicating calendar date, time of day, time zone, a day of the week, relative time, relative date, and numbers. &lt;/p&gt;
&lt;p&gt;An empty string indicates the beginning of
the day. &lt;/p&gt;
&lt;p&gt;The date  string  format  is  more  complex  than  is  easily
documented here but is fully described in the info documentation.&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;cp&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;cp - copy files and directories&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.&lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OPTION&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-T&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; SOURCE DEST
&lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OPTION&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. SOURCE&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. DIRECTORY
&lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OPTION&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. -t DIRECTORY SOURCE&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;OPTIONS&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;-b, make a backup of each existing destination file
-f, --force
if an existing destination file cannot be opened, remove it  and
try  again  (this  option  is ignored when the -n option is also
used)
-i, --interactive
prompt before overwrite (overrides a previous -n option)
-l, --link
hard link files instead of copying
-n, --no-clobber (VERY USEFUL)
do not overwrite an  existing  file  (overrides  a  previous  -i
option)
-p     same as --preserve=mode,ownership,timestamps

--preserve[=ATTR_LIST]
preserve       the      specified      attributes      (default:
mode,ownership,timestamps), if possible  additional  attributes:
context, links, xattr, all

--no-preserve=ATTR_LIST
don&apos;t preserve the specified attributes
-R, -r, --recursive
copy directories recursively
-u, --update
copy only when the SOURCE file is  newer  than  the  destination
file or when the destination file is missing
-v, --verbose
explain what is being done&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;EXAMPLES&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;# Copy the file&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
foo.txt
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
foo.txt bar.txt

&lt;span class=&quot;token comment&quot;&gt;# Copy multiple files&lt;/span&gt;
$ tree -F
&lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
├── bar.txt
├── baz.txt
├── foo/
└── foo.txt
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; foo.txt bar.txt baz.txt foo/
$ tree &lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
├── bar.txt
├── baz.txt
├── foo
│   ├── bar.txt
│   ├── baz.txt
│   └── foo.txt
└── foo.txt

&lt;span class=&quot;token comment&quot;&gt;# The same operation can also be achieved through pattern matching&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; *.txt foo/

&lt;span class=&quot;token comment&quot;&gt;# Copy the directory&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; -R directory/ foo

&lt;span class=&quot;token comment&quot;&gt;# Copy multiple directories&lt;/span&gt;
$ tree &lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
├── bar
│   └── bar.txt
├── baz
│   └── baz.txt
├── foo
│   └── foo.txt
└── some-directory
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; foo bar baz some-directory
$ tree &lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
├── bar
│   └── bar.txt
├── baz
│   └── baz.txt
├── foo
│   └── foo.txt
└── some-directory
    ├── bar
    │   └── bar.txt
    ├── baz
    │   └── baz.txt
    └── foo
        └── foo.txt

&lt;span class=&quot;token comment&quot;&gt;# Take a backup of a file&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; -b foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt bar.txt~

&lt;span class=&quot;token comment&quot;&gt;# Specify backup&apos;s extension&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; -S .bak foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt bar.txt.bak
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
foo.txt bar.txt bar.txt.bak

&lt;span class=&quot;token comment&quot;&gt;# How to prompt for confirmation to overwrite file&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; -i foo.txt bar.txt
cp: overwrite &lt;span class=&quot;token string&quot;&gt;&apos;bar.txt&apos;&lt;/span&gt;? 

&lt;span class=&quot;token comment&quot;&gt;# Create hard link instead of copying&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; foo.txt
foo text
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; -l foo.txt bar.txt
$ &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;bar text&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; bar.txt
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; foo.txt
bar text

&lt;span class=&quot;token comment&quot;&gt;# Copy with preserving file attributes&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -la
-rw------- 1 myUser &lt;span class=&quot;token function&quot;&gt;users&lt;/span&gt; 0 Oct 13 09:14 foo.txt
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; --preserve foo.txt bar.txt
-rw-------  1 myUser &lt;span class=&quot;token function&quot;&gt;users&lt;/span&gt;     0 Oct 13 09:14 bar.txt
-rw-------  1 myUser &lt;span class=&quot;token function&quot;&gt;users&lt;/span&gt;     0 Oct 13 09:14 foo.txt

&lt;span class=&quot;token comment&quot;&gt;# Showing files that are being copied&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; -R -v foo bar
&lt;span class=&quot;token string&quot;&gt;&apos;foo&apos;&lt;/span&gt; -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;bar&apos;&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&apos;foo/foo.txt&apos;&lt;/span&gt; -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;bar/foo.txt&apos;&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&apos;foo/bar.txt&apos;&lt;/span&gt; -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;bar/bar.txt&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;rm&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;rm - remove files or directories&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;rm removes each specified file.  By default, it does not remove directories.&lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;p&gt;rm [OPTION]… [FILE]…&lt;/p&gt;
&lt;h2&gt;OPTIONS&lt;/h2&gt;
&lt;p&gt;Remove (unlink) the FILE(s).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;-f, --force, ignore nonexistent files and arguments, never prompt

-i, prompt before every removal

--no-preserve-root, do not treat &apos;/&apos; specially.
You don&apos;t need this unless you want to delete your OS (believe me, you don&apos;t)

--preserve-root, do not remove &apos;/&apos; (default)

-r, -R, --recursive, remove directories and their contents recursively

-d, --dir, remove empty directories

-v, --verbose, explain what is being done&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;EXAMPLES&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;# Removing a file&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; foo.txt
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
bar.txt

&lt;span class=&quot;token comment&quot;&gt;# Removing multiple files&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# or using patterns&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
foo.txt bar.txt baz.zip
$ &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; *.zip
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
baz.zip

&lt;span class=&quot;token comment&quot;&gt;# Prompt for confirmation before removing smth&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -i foo.txt
rm: remove regular &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;foo.txt&apos;&lt;/span&gt;?
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
bar.txt

&lt;span class=&quot;token comment&quot;&gt;# Show more information while removing smth&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt
&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -v foo.txt
removed &lt;span class=&quot;token string&quot;&gt;&apos;foo.txt&apos;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
bar.txt

&lt;span class=&quot;token comment&quot;&gt;# Removing directories, use ls -F to show directaries with / on the end&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -F
foo.txt bar/
$ &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -R bar/
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -F 
foo.txt

&lt;span class=&quot;token comment&quot;&gt;# If you get permission denied, you most probably have to use sudo&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; ~/Documents/smth.txt

&lt;span class=&quot;token comment&quot;&gt;# If you try to delete write-protected files, you&apos;ll be prompted for confirmation like this:&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; foo
rm: remove write-protected regular empty &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;foo&apos;&lt;/span&gt;? y
&lt;span class=&quot;token comment&quot;&gt;# If you don&apos;t want the system to show this message, do force removal:&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -f foo
&lt;span class=&quot;token comment&quot;&gt;# Also NEVER USE THIS COMMAND&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# NEVER, IT DELETES ALL FILES ON YOUR MACHINE&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -rf /
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;mv&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;mv - move (rename) files&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.&lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OPTION&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-T&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; SOURCE DEST
&lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OPTION&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. SOURCE&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. DIRECTORY
&lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OPTION&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. -t DIRECTORY SOURCE&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;OPTIONS&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;-b, &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt; a backup of each existing destination &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;

-f, --force
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; not prompt before overwriting
                            
-i, --interactive
prompt before overwrite

-n, --no-clobber
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; not overwrite an existing &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;

-u, --update
move  only  when  the  SOURCE &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; is newer than the destination
&lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; or when the destination &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; is missing

-v, --verbose
explain what is being &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;EXAMPLES&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;# Move a file&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
foo.txt
$ &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
bar.txt

&lt;span class=&quot;token comment&quot;&gt;# Move file in a directory&lt;/span&gt;
$ tree -F &lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
├── bar/
└── foo.txt
$ &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; foo.txt bar
$ tree -F 
&lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt;
└── bar/
    └── foo.txt

&lt;span class=&quot;token comment&quot;&gt;# Move multiple files into a directory&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; file1.txt file.2.txt file3.txt folder
&lt;span class=&quot;token comment&quot;&gt;# Or&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; *.txt folder

&lt;span class=&quot;token comment&quot;&gt;# Move a directory, use ls -F to list directories with/on the end&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -F 
foo/
$ &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; foo bar
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -F
bar/

&lt;span class=&quot;token comment&quot;&gt;# Prompt before overwriting the file&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; -i foo.txt bar.txt
mv: overwrite &lt;span class=&quot;token string&quot;&gt;&apos;bar.txt&apos;&lt;/span&gt;?

&lt;span class=&quot;token comment&quot;&gt;# How not to overwrite existing files&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; -n foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
foo.txt bar.txt

&lt;span class=&quot;token comment&quot;&gt;# Making a backup of an existing file&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; -b foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
bar.txt  bar.txt~

&lt;span class=&quot;token comment&quot;&gt;# To change the backup extension do:&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; -S .bak -b foo.txt bar.txt
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
bar.txt  bar.txt.bak
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;nano&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;nano - Nano’s ANOther editor, an enhanced free Pico clone&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;nano is a  small and friendly editor.&lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;nano&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;options&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;+line&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;,column&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; file&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;REFERENCE&lt;/h2&gt;
&lt;p&gt;Ubuntu man pages: &lt;a href=&quot;http://manpages.ubuntu.com/manpages/artful/en/man1/nano.1.html&quot;&gt;http://manpages.ubuntu.com/manpages/artful/en/man1/nano.1.html&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;cat&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;cat - concatenate files and print on the standard output&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;Concatenate FILE(s) to standard output.
With no FILE, or when FILE is -, read standard input.&lt;/p&gt;
&lt;h2&gt;OPTIONS&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;-A, --show-all
equivalent to -vET

-E, --show-ends
display $ at end of each line

-n, --number
number all output lines

-s, --squeeze-blank
suppress repeated empty output lines

-T, --show-tabs
display TAB characters as ^I

-v, --show-nonprinting
use ^ and M- notation, except for LFD and TAB&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;EXAMPLES&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;# Show contents of file&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; foo.txt
Hello world

&lt;span class=&quot;token comment&quot;&gt;# How to write contents of one file to another one&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; foo.txt &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; bar.txt
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; bar.txt
Hello world

&lt;span class=&quot;token comment&quot;&gt;# To append the contents of one file to another, use:&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; wine.txt &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; beer.txt
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; beer.txt

&lt;span class=&quot;token comment&quot;&gt;# Combine contents of few files into one:&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; *.txt &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; combined.txt

&lt;span class=&quot;token comment&quot;&gt;# To add line numbers to the output use -n:&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; -n foot.txt
     1  asd
     2  asdgfasdg
     3  adgd
     4    adfsd
         &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

&lt;span class=&quot;token comment&quot;&gt;# Show end of lines using -E&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; -E example.txt
This line has no space at the end.$
This one does. $

&lt;span class=&quot;token comment&quot;&gt;# To squeze repeatable blank lines use -s:&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; blanks.txt
Line one

Line two


Line three
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; -s blanks.txt
Line one

Line two

Line three

&lt;span class=&quot;token comment&quot;&gt;# Show tabs in the file&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; -T tabs.txt
^IOne Tab
^I^ITwo tabs
^I^I^IThree tabs
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;less&lt;/summary&gt;
&lt;h2&gt;NAME&lt;/h2&gt;
&lt;p&gt;less - opposite of more&lt;/p&gt;
&lt;h2&gt;DESCRIPTION&lt;/h2&gt;
&lt;p&gt;Less is a program similar to more (1), but it has many more features.&lt;/p&gt;
&lt;p&gt;Less  does  not  have to read the entire input file before starting, so
with large input files, it starts up faster than text  editors  like  vi&lt;/p&gt;
&lt;h2&gt;SYNTAX&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;less [-[+]aABcCdeEfFgGiIJKLmMnNqQrRsSuUVwWX~]
            [-b space] [-h lines] [-j line] [-k keyfile]
            [-{oO} logfile] [-p pattern] [-P prompt] [-t tag]
            [-T tagsfile] [-x tab,...] [-y lines] [-[z] lines]
            [-# shift] [+[+]cmd] [--] [filename]...&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;REFERENCE&lt;/h2&gt;
&lt;p&gt;Ubuntu man pages: &lt;a href=&quot;http://manpages.ubuntu.com/manpages/artful/en/man1/less.1.html&quot;&gt;http://manpages.ubuntu.com/manpages/artful/en/man1/less.1.html&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;apt-get&lt;/summary&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;man&lt;/summary&gt;
&lt;/details&gt;
&lt;!-- &lt;details&gt;
&lt;summary&gt;sl&lt;/summary&gt;
&lt;/details&gt; --&gt;
Special thanks to: https://shapeshed.com/
&lt;h2&gt;Lecture notes:&lt;/h2&gt;
&lt;h3&gt;cd&lt;/h3&gt;
&lt;p&gt;cd - Change Directory&lt;/p&gt;
&lt;p&gt;This command lets you navigate through your filesystem directories.&lt;/p&gt;
&lt;p&gt;First, Let’s open the terminal and try this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; ~
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Now we are in the user’s home directory.&lt;/p&gt;
&lt;p&gt;Let’s go to the Documents directory!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; Documents/
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;And then back to the home directory using &lt;code&gt;..&lt;/code&gt; (parent directory is &lt;code&gt;..&lt;/code&gt;, all directories have it)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;or the command that basically means undo the previous cd:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; -
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;pwd&lt;/h3&gt;
&lt;p&gt;Okay, we know how to travel in the filesystem,
but every traveler should have their own compass!&lt;/p&gt;
&lt;p&gt;This command (!compass!) lets you see where you are now in the filesystem&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;pwd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;the output should be something like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;/Users/myUsername/Documents
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;ls&lt;/h3&gt;
&lt;p&gt;YAS! Now we, as travelers, should sense everything that is near us!&lt;/p&gt;
&lt;p&gt;For that reason, we will use command &lt;code&gt;ls&lt;/code&gt;. It lets us find out what is in the current directory!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;mkdir&lt;/h3&gt;
&lt;p&gt;We’ve got a long trip in this OS, thus we need to prepare some place to store our stuff!&lt;/p&gt;
&lt;p&gt;We are going to create a directory and &lt;code&gt;mkdir&lt;/code&gt; command will help us!&lt;/p&gt;
&lt;p&gt;Let’s create a new directory in &lt;code&gt;~/Documents&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; ~/Documents
&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; MyDirectoryName
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;touch&lt;/h3&gt;
&lt;p&gt;We’ve created a directory and now let’s create a file in MyDirectoryName!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; MyDirectoryName
&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; myCustomFile.js
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;cp&lt;/h3&gt;
&lt;p&gt;Copying code is something that every developer should know on the professional level!&lt;/p&gt;
&lt;p&gt;Now we have to prepare our workspace for that amazing command!&lt;/p&gt;
&lt;p&gt;Let’s go back to the parent’s directory and create one more directory&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; MyPrettyDirectory
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Here is the fan part! Let’s copy the file &lt;code&gt;myCustomFile.js&lt;/code&gt; from &lt;code&gt;MyDirectoryName&lt;/code&gt; to &lt;code&gt;MyPrettyDirectory&lt;/code&gt; using this command:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; MyDirectoryName/myCustomFile.js MyPrettyDirectory/
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;So now we have a file called &lt;code&gt;myCustomFile.js&lt;/code&gt; in both &lt;code&gt;MyDirectoryName&lt;/code&gt; and &lt;code&gt;MyPrettyDirectory&lt;/code&gt; directories! Voila!&lt;/p&gt;
&lt;h3&gt;rm&lt;/h3&gt;
&lt;p&gt;Oh, we did the copy of the file by mistake?! We need to delete the second file right now! The &lt;code&gt;rm&lt;/code&gt; command is going to save us all! So we should be in the &lt;code&gt;~/Documents&lt;/code&gt; directory now!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; MyPrettyDirectory/myCustomFile.js
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;whew, we’ve deleted this unnecessary file!&lt;/p&gt;
&lt;h3&gt;mv&lt;/h3&gt;
&lt;p&gt;What if we didn’t want to actually copy it, we wanted to move the file from one directory to another (something like cut &amp;#x26; paste!!!). Again, I’m assuming that we are currently in the &lt;code&gt;~/Documents&lt;/code&gt; directory.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; MyDirectoryName/myCustomFile.js MyPrettyDirectory/
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;So now we don’t have anything in &lt;code&gt;MyDirectoryName&lt;/code&gt; and have &lt;code&gt;myCustomFile.js&lt;/code&gt; in &lt;code&gt;MyPrettyDirectory&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;nano&lt;/h3&gt;
&lt;p&gt;Every programmer should be able to write code, right?!&lt;/p&gt;
&lt;p&gt;nano is a small and friendly editor, it’s going to help us write our first
(well, maybe not) lines of Javascript!&lt;/p&gt;
&lt;p&gt;So now &lt;code&gt;myCustomFile.js&lt;/code&gt; file is in the &lt;code&gt;MyPrettyDirectory&lt;/code&gt; directory. Let’s open it with &lt;code&gt;nano&lt;/code&gt;!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;nano&lt;/span&gt; MyPrettyDirectory/myCustomFile.js
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Wow, this may seem confusing! But it’s much simpler than it seems!&lt;/p&gt;
&lt;p&gt;Here we can edit the file. Let’s add this line of code:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; year &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Later in this course, you will understand what each of these characters means!&lt;/p&gt;
&lt;p&gt;Nice! Let’s save it and move on to another terminal command! Do this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;ctrl + X    # command for exiting nano
Y                 # it asks if you want to save changes or no
enter            # submit your answer!&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;cat&lt;/h3&gt;
&lt;p&gt;You are in the terminal and you want to read a small file without opening any editor?&lt;/p&gt;
&lt;p&gt;NOT A PROBLEM!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat&lt;/code&gt; is going to help you! let’s go to &lt;code&gt;MyPrettyDirectory&lt;/code&gt; from &lt;code&gt;~/Documents&lt;/code&gt; directory with&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt; MyPrettyDirectory
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;And let’s print the content of &lt;code&gt;myCustomFile.js&lt;/code&gt; to the terminal!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; myCustomFile.js
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Voila :D &lt;/p&gt;
&lt;h3&gt;less&lt;/h3&gt;
&lt;p&gt;There is also another way of looking into file’s content! Try:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;less&lt;/span&gt; myCustomFile.js
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;apt-get&lt;/h3&gt;
&lt;p&gt;Now let’s learn a little bit about installing packages to your computer using the terminal!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;apt-get install sl&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;man&lt;/h3&gt;
&lt;p&gt;So if you want to find the manual for any built-in terminal command, you can run something like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;man&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Developers of Linux has written these manuals for you to learn without even using the internet!&lt;/p&gt;
&lt;h3&gt;sl&lt;/h3&gt;
&lt;p&gt;And now let’s try the package that we installed earlier :D&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code&gt;sl
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;p&gt;Don’t forget that you can always reach members of the iterate community, ask questions, fix issues and bugs, also just talk about random things in the iterate Slack &lt;a href=&quot;https://iterate-hackerspace.slack.com/messages&quot;&gt;channel&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Dual booting Ubuntu with Windows]]></title><description><![CDATA[This short blog post is part of the post series done for iterate hackerspace, explaining why to use Linux as your primary operating system…]]></description><link>https://yerevancoder.com/2018-02-04-dual-booting-linux-with-windows/</link><guid isPermaLink="false">https://yerevancoder.com/2018-02-04-dual-booting-linux-with-windows/</guid><pubDate>Sun, 04 Feb 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This short blog post is part of the post series done for iterate hackerspace, explaining why to use Linux as your primary operating system. Dual booting is a good way for beginners unfamiliar to Linux to try it, without sacrificing performance, like it happens in case of virtualization. There is one thing that can be said for sure: At first it may seem weird, sometimes even too complicated and not user-friendly, but, after a long time of Linux usage, most people fall in love with Unix-like operating systems, and don’t even want to return to their previous OS. &lt;/p&gt;
&lt;h2&gt;Table of contents&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;#why-linux-&quot;&gt;Why Linux&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;#how-to-install&quot;&gt;How to install&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Why Linux?&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;There are a lot of advantages of using Linux for development and everyday life. Some of those are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;Security&lt;/h4&gt;
&lt;p&gt;Linux has been around since the nineties, and managed to stay secure against malwares, viruses and other forms of malicious attacks. This is partially thanks to Linux kernel being an &lt;a href=&quot;https://github.com/torvalds/linux&quot;&gt;open-source project&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Software&lt;/h4&gt;
&lt;p&gt;A lot of people are not ready to switch to Linux as they are not sure if their usual applications like Microsoft Word can be run on it. However, there is a large amount of free software and there are a lot of equivalents to Windows programs.
Here is the &lt;a href=&quot;http://wiki.linuxquestions.org/wiki/Linux_software_equivalent_to_Windows_software#Office_and_Productivity&quot;&gt;list of some popular alternatives&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Support&lt;/h4&gt;
&lt;p&gt;Another thing that Linux is famous for is its flexibility. You can have Linux literally for everything, be it an old dusty computer, a server or a smart toaster. In fact, most of the wi-fi routers are running either Linux or other Unix-like OS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Skills&lt;/h4&gt;
&lt;p&gt;Note, this is a highly subjective opinion and a lot of people will disagree. But the truth is, there is a gap in the software development industry between people who can program and who can’t. The thing which seperates latter from former is the mindset: the ability to understand that programming is not only about the code. From my own experience I can say that using Linux sets the mindset of a true ‘hacker’, the ability to control nearly every aspect of the OS gives you wings do dig more and more into it, try everything with your own hands, transform the everyday routine of using a computer as a tool into a fascinating learning experience.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to install&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;I’d write an installation guide but there’s already a great official &lt;a href=&quot;https://tutorials.ubuntu.com/tutorial/tutorial-install-ubuntu-desktop#0&quot;&gt;tutorial&lt;/a&gt; out there by Ubuntu developers. Don’t forget that you can always reach members of the iterate community, ask questions, fix issues and bugs, also just talk about random things in the iterate Slack &lt;a href=&quot;https://iterate-hackerspace.slack.com/messages&quot;&gt;channel&lt;/a&gt;.&lt;br&gt;
&lt;em&gt;Happy Ubuntu installation! :)&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Racing to get a timeout]]></title><description><![CDATA[By Edgar Aroutiounian ,
catch me on  twitter Here is a simple and elegant way to say “Run this shell command within a
maximum of x seconds…]]></description><link>https://yerevancoder.com/2018-01-12-promises-and-timeouts/</link><guid isPermaLink="false">https://yerevancoder.com/2018-01-12-promises-and-timeouts/</guid><pubDate>Fri, 12 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;By Edgar Aroutiounian&lt;/em&gt;,
catch me on &lt;a href=&apos;https://twitter.com/@edgararout&apos;&gt;twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is a simple and elegant way to say “Run this shell command within a
maximum of x seconds”&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token string&quot;&gt;&apos;use strict&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; spawnAsync &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;@expo/spawn-async&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; with_timeout &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; limit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`Took longer than &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;limit &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; seconds`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;spawnAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Notice how we don’t need a trailing &lt;code&gt;await&lt;/code&gt; for the Promise and the
usage of &lt;code&gt;Promise.race&lt;/code&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How much should you be paid in Armenian coding jobs?]]></title><description><![CDATA[By Edgar Aroutiounian ,
catch me on  twitter Here’s a topic that everyone should speak more openly about:  pay . Pay is a topic that people…]]></description><link>https://yerevancoder.com/2018-01-09-pay-rates-in-armenian-tech/</link><guid isPermaLink="false">https://yerevancoder.com/2018-01-09-pay-rates-in-armenian-tech/</guid><pubDate>Tue, 09 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;By Edgar Aroutiounian&lt;/em&gt;,
catch me on &lt;a href=&apos;https://twitter.com/@edgararout&apos;&gt;twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here’s a topic that everyone should speak more openly about: &lt;strong&gt;pay&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Pay is a topic that people don’t talk openly about in Armenian culture
and the tech sector also suffers from that. Here are some rough
estimates of what you can expect to receive as a programmer in Armenia
based off of my own understandings, talking with people in the
industry and having an Armenian business as well that paid
programmers. I’ve also included some figures for project quotes and
estimations.&lt;/p&gt;
&lt;h1&gt;Earning a salary&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;studyHard&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hours&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; hours_really_needed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; hours &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; experience &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;practiceProjects&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hours_really_needed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;is_talent_in_armenia&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;talent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;experience&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Talent is underpaid&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;consider_overseas_options&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;Interns&lt;/h2&gt;
&lt;p&gt;Interns &lt;em&gt;can&lt;/em&gt; get paid up to $250 a month, this is a coding based
internship. Most likely in a frontend kind of position, something
React, or Vue based. Cheaper, more enterprisey places use Angular. They
pay much less and offer less growth for interns. &lt;strong&gt;Never work for free
as a coding intern.&lt;/strong&gt; And &lt;strong&gt;ALWAYS&lt;/strong&gt; get something in written form,
never just oral contract.&lt;/p&gt;
&lt;h2&gt;Entry level&lt;/h2&gt;
&lt;p&gt;This group usually has about 6-12 months experience, they get paid
about $300-$500 a month.&lt;/p&gt;
&lt;h2&gt;Mid level&lt;/h2&gt;
&lt;p&gt;This group usually has about 12-24 months experience, they get paid
about $500-800 a month.&lt;/p&gt;
&lt;h2&gt;Experienced &amp;#x26; exceptional to keep&lt;/h2&gt;
&lt;p&gt;I purposefully don’t say senior because it is a nebulous term in this
industry. That said, an experienced programmer, that is someone that
can build up your startup/company usually gets at least $1000 a month
in Yerevan. Places like &lt;code&gt;PicsArt&lt;/code&gt; can afford up to $3000 a
month. &lt;strong&gt;Note&lt;/strong&gt;, $3000 is not a max or a ceiling. Quite a few people
get more than that but that is likely something specialized.&lt;/p&gt;
&lt;h3&gt;Caveats&lt;/h3&gt;
&lt;p&gt;This was assuming Yerevan, Gyumri rates are lower but there are rare
positions for experienced people that can fetch $2000 a month.&lt;/p&gt;
&lt;h1&gt;Doing a project as a freelancer&lt;/h1&gt;
&lt;p&gt;If you’re working as a freelancer, that is, contract work then you
must first make a decision. Will your contract work be with people in
Armenia or will it for overseas; this matters for tax reasons.&lt;/p&gt;
&lt;h2&gt;Projects solely based in Armenia&lt;/h2&gt;
&lt;p&gt;I recommend that you first establish the liquidity of the potential
business partner. I usually do this by asking if the potential
employer has at least $4000 at this moment ready to spend on the
project. This attitude will save you a lot of time and potential
misunderstandings later. Mobile development is hot, a mobile app that
takes about 3-4 months should cost at least $6,000-$10,000 depending of
course on various complexities and nuances of the app
itself. Recommend you quickly move on if the other side is
uncomfortable with these dollar figures.&lt;/p&gt;
&lt;h2&gt;Projects based overseas, outside of Armenia&lt;/h2&gt;
&lt;p&gt;Recommend that you open an Armenian business and utilize the tax
savings given to a business for outsources/contract work.&lt;/p&gt;
&lt;h1&gt;Programmer pay a month in Armenia TL;DR&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Intern&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Entry&lt;/th&gt;
&lt;th&gt;Mid-level&lt;/th&gt;
&lt;th&gt;Experience &amp;#x26; Special&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;50 &amp;#x3C;= $ &amp;#x3C;= $200&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$300 &amp;#x3C;= $ &amp;#x3C;= $500&lt;/td&gt;
&lt;td&gt;$500 &amp;#x3C;= $ &amp;#x3C;= $800&lt;/td&gt;
&lt;td&gt;$1000 &amp;#x3C;= $ &amp;#x3C;= $3000+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content:encoded></item><item><title><![CDATA[Elm, beauty of functional programming to frontend]]></title><description><![CDATA[By Grigori Aramyan ,
catch me on  twitter Elm is a strongly-typed functional programming language for
frontend. It has simplicity and…]]></description><link>https://yerevancoder.com/2017-12-31-elm-intro/</link><guid isPermaLink="false">https://yerevancoder.com/2017-12-31-elm-intro/</guid><pubDate>Sun, 31 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;By Grigori Aramyan&lt;/em&gt;,
catch me on &lt;a href=&apos;https://twitter.com/@griaram&apos;&gt;twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elm is a strongly-typed functional programming language for
frontend. It has simplicity and maintainability of functional
programming paradigm in general, but exposes beauty of it’s own
architecture as well. It’s a compiled language and compiler makes max
efforts to ensure bug-free runtime code, which, on the other
hand-side, means your code won’t compile, if there’s a mistype, use of
undefined variable or similar stuff. Elm’s error messages are one of
the “proud points” of Evan’s team though (creator of Elm, Evan
Czaplicki). Compiler produces nice, human-readable messages with
hints, pointing exactly to where/what is wrong with code, assisting
devs as much as machines can probably do.&lt;/p&gt;
&lt;h2&gt;The Elm Architecture&lt;/h2&gt;
&lt;p&gt;Workflow of any Elm application is pretty straightforward: user fires a message (read event) by interacting with UI (text input, button click etc.), &lt;code&gt;update&lt;/code&gt; function handles it by pattern matching on type of message and modifying model accordingly, &lt;code&gt;view&lt;/code&gt; function re-renders UI using it’s virtual dom, so only minimal required render is performed. If you’re familiar with React/Redux, this architecture won’t be confusing. (Redux workflow was partially inspired by the elm architecture, according to Dan Abramov, author of Redux) Otherwise, it won’t be confusing after you play with it a bit. I made a simple todo app for this post, showing the very basics of Elm application, like module structure, code conventions, syntax, UI component styling, interop with JavaScript etc. You can find it under this repo: &lt;a href=&quot;https://github.com/grigor-aramyan/todo-elm&quot;&gt;https://github.com/grigor-aramyan/todo-elm&lt;/a&gt;. Read the Readme, it explains how you can run the app and make changes to elm code itself. I made a skeleton boilerplate of &lt;code&gt;Main.elm&lt;/code&gt; as well, that can get you up-and-running in seconds. You can play with it also, or just copy/paste it’s content in every Main.elm of your projects (main Elm module, from which compiler starts running, is called &lt;code&gt;Main.elm&lt;/code&gt;). Here’s the boilerplate gist: &lt;a href=&quot;https://gist.github.com/grigor-aramyan/b29a6272f5656d9ddc56f591a3e03063&quot;&gt;https://gist.github.com/grigor-aramyan/b29a6272f5656d9ddc56f591a3e03063&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Elm has it’s own REPL. You’ll get that after installing Elm on your
local machine from official website &lt;a href=&quot;http://elm-lang.org/&quot;&gt;http://elm-lang.org/&lt;/a&gt;. After
installing, type &lt;code&gt;elm&lt;/code&gt; in shell to see what you’ve got.&lt;/p&gt;
&lt;h2&gt;Type and type aliases&lt;/h2&gt;
&lt;p&gt;You can define your own types in Elm.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-elm&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Visualize&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;All&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Completed&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Active&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This chunk defines “Visualize” type, which can have 3 values, either &lt;code&gt;All&lt;/code&gt;, &lt;code&gt;Completed&lt;/code&gt; or &lt;code&gt;Active&lt;/code&gt;. One use case for custom types is dispatch events/messages - by having enum-like data, &lt;code&gt;update&lt;/code&gt; function can precisely pattern match fired message and perform tasks accordingly. Also, it helps compiler to help us by warning, that not all possible type values are covered in &lt;code&gt;update&lt;/code&gt;. Actually, it’s not warning us, it just won’t compile.&lt;/p&gt;
&lt;p&gt;Type aliases make possible to combine primitive types into more
complex structures.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-elm&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TodoItem&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;completed&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The above chunk defines &lt;code&gt;TodoItem&lt;/code&gt; custom type (read, record or
object or class), that has 3 fields. Type aliases are often used to
define application model structure. Here’s an example of it:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-elm&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;todoItems&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TodoItem&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;currentTodo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Visualize&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;currentIndex&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;Interop, Encode/Decode&lt;/h2&gt;
&lt;p&gt;Elm application can communicate with JavaScript modules through ports
(and flags, actually, but ports are more flexible, so get to know them
from the beggining). Elm is strongly typed language, JavaScript - is
not, so there’s need of encoders and decoders, that will explain to
JavaScript modules what particular Elm values mean and vice
versa. Decoders have another major role - they want let data to pass
through port and into Elm, if it doesn’t comply to type defined in
decoder, so JavaScript side bugs will stay there only.&lt;/p&gt;
&lt;p&gt;The above mentioned Todo application has Encoders/Decoders and interop
with Javascript implemented, so you can check them at work. Also,
(actually, in first place) look up the &lt;code&gt;Get Started&lt;/code&gt; guide in Elm
official website docs. For community discussions, join Elm’s page on
Reddit: &lt;a href=&quot;https://www.reddit.com/r/elm/&quot;&gt;https://www.reddit.com/r/elm/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Partial function&lt;/h2&gt;
&lt;p&gt;Maybe one of the most challenging parts in Elm application are type
annotations. Here’s an example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-elm&quot;&gt;&lt;code&gt;&lt;span class=&quot;token hvariable&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;It says, function “update” receives 2 parameters of types “Msg” and
“Model”, then returns a type “Model, Cmd Msg”. Here’s the question -
why arrows, instead of commas. And here’s the answer - because Elm has
the idea of “partial functions” built within.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-elm&quot;&gt;&lt;code&gt;&lt;span class=&quot;token hvariable&quot;&gt;someFunc&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;If you give “someFunc” all 3 declared parameters, it will return a
“Bool” type value. On the other hand, if you give it just “String”, it
will return an anonymous function whith following type annotation
&lt;code&gt;Int -&gt; Int -&gt; Bool&lt;/code&gt; (the former “String” is excluded, because
it’s matched already with one-parameter function call). That’s the
reason why there is no clear separation of function arguments and it’s
return value - argument values can become return values, if partial
functions are in play.&lt;/p&gt;
&lt;p&gt;Hope this post will help to get some feel of Elm beauty.&lt;/p&gt;
&lt;p&gt;Happy hacking ;)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Squashing commits with git]]></title><description><![CDATA[By Robert Adamian ,
find me on  twitter Git is a free and open source distributed version control system designed to handle everything from…]]></description><link>https://yerevancoder.com/2017-12-24-squash-commits-with-git/</link><guid isPermaLink="false">https://yerevancoder.com/2017-12-24-squash-commits-with-git/</guid><pubDate>Sun, 24 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;By Robert Adamian&lt;/em&gt;,
find me on &lt;a href=&apos;https://twitter.com/@paerallax&apos;&gt;twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Eh8FBP7.png&quot; alt=&quot;alt text&quot; title=&quot;Git&amp;#x27;s logo&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;As with most other distributed version control systems, and unlike most client–server systems, every Git directory on every computer is a full-fledged repository with complete history and full version tracking abilities, independent of network access or a central server.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It’s also a must-have in any software developer’s toolchain. Using git for version control allows for powerful collaboration in tech teams. &lt;/p&gt;
&lt;p&gt;I won’t delve into Git’s history and the motivations behind it here as that deserves a post of its own or even a series of posts. Instead, we discuss a simple git feature you might need - squashing commits.  &lt;/p&gt;
&lt;p&gt;I needed to do this yesterday but forgot the command. First Stack Overflow answers were overly complicated for my use case. So here goes a simplified version. &lt;/p&gt;
&lt;p&gt;Let’s say you’ve been working on a feature and just finished. With git, it’s possible to squash previous commits into one. This helps you logically group commits together before sharing with others. Say you’ve been implementing &lt;a href=&quot;https://en.wikipedia.org/wiki/Depth-first_search&quot;&gt;DFS&lt;/a&gt; and this is your current &lt;code&gt;git log&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-zsh&quot;&gt;&lt;code&gt;* 16e9bbd (HEAD -&gt; master) depth-first search working
* 36ab519 fix vertex lookup
* aa264b1 label vertices
* bcd1838 recursive discovery
* 3a6eed3 isolate subgraph
* 7126d8e add topological sort&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Now you want to squash your latest 5 commits into one to have a nice history. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-zsh&quot;&gt;&lt;code&gt;$ git rebase -i HEAD~5&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;After you run this command your terminal editor will open up with the following:  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-zsh&quot;&gt;&lt;code&gt;pick 3a6eed3 isolate subgraph
pick bcd1838 recursive discovery
pick aa264b1 label vertices
pick 36ab519 fix vertex lookup
pick 16e9bbd depth-first search working&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Note that while doing interactive rebase, commits are displayed in reverse order.&lt;/p&gt;
&lt;p&gt;Replace the words “pick” with “squash” next to the commits you want to squash into the commit before it. In our case:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-zsh&quot;&gt;&lt;code&gt;pick 3a6eed3 isolate subgraph
squash bcd1838 recursive discovery
squash aa264b1 label vertices
squash 36ab519 fix vertex lookup
squash 16e9bbd depth-first search working&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Save and close the editor.&lt;/p&gt;
&lt;p&gt;If you’re too lazy to type that or you’re operating on a Commodore 64 and desperately need those additional few bytes, it’s also possible to write “s” for squash and “p” for pick. So the latest snippet is equivalent to:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-zsh&quot;&gt;&lt;code&gt;p 3a6eed3 isolate subgraph
s bcd1838 recursive discovery
s aa264b1 label vertices
s 36ab519 fix vertex lookup
s 16e9bbd depth-first search working&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Git will now give you the opportunity to change your commit message into something more descriptive. For doing that, replace this: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-zsh&quot;&gt;&lt;code&gt;# This is a combination of 5 commits.
# The first commit&apos;s message is:
isolate subgraph

# This is the 2nd commit message:

recursive discovery

# This is the 3rd commit message:

label vertices

# This is the 4th commit message:

fix vertex lookup

# This is the 5th commit message:

depth-first seach working&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;With just: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-zsh&quot;&gt;&lt;code&gt;implement depth-first search&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Note that your new commit message line shouldn’t start with &lt;code&gt;#&lt;/code&gt; as it’ll be treated as a comment.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git log&lt;/code&gt; should then return:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-zsh&quot;&gt;&lt;code&gt;* bb26b9d (HEAD -&gt; master) implement depth-first search
* ea1a7e8 add topological sort&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;That’s it! Now you have your commits squashed into one with an easier to navigate history.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Tech places and events in Armenia]]></title><description><![CDATA[By Edgar Aroutiounian ,
catch me on  twitter So you just landed in Yerevan and need a quick way to get a pulse of
the tech industry ASAP…]]></description><link>https://yerevancoder.com/2017-12-23-tech-places-and-events/</link><guid isPermaLink="false">https://yerevancoder.com/2017-12-23-tech-places-and-events/</guid><pubDate>Sat, 23 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;By Edgar Aroutiounian&lt;/em&gt;,
catch me on &lt;a href=&apos;https://twitter.com/@edgararout&apos;&gt;twitter&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;land_in_armenia&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;look_for_events&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make_new_friends&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;So you just landed in Yerevan and need a quick way to get a pulse of
the tech industry ASAP. Here’s your insider’s crash course&lt;/p&gt;
&lt;h1&gt;Places for tech&lt;/h1&gt;
&lt;h2&gt;Yerevan-based&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://istc.am&quot;&gt;ISTC&lt;/a&gt;-The Innovative Solutions and Technologies
Center hosts many many tech events featuring some of the best minds
in the local Data Science scene and is home to quite a few startups.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.micarmenia.am&quot;&gt;MIC-Armenia&lt;/a&gt;-Microsoft Innovation Center
Armenia holds many trainings, hosts talks.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://aua.am&quot;&gt;AUA&lt;/a&gt;-Has a good computer science department,
comparable to a top 200 USA university. They also host many tech
events. &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.smartgate.vc/single-post/2017/12/22/Better-together-Hero-House-is-introduced-to-the-startup-community-and-friends&quot;&gt;HeroHouse&lt;/a&gt;-An
exciting and brand new initiative for startups in Armenia&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tumo.org&quot;&gt;Tumo&lt;/a&gt;-A truly remarkable and unique place in the
world, Tumo hosts many tech events and startups.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Outside Yerevan&lt;/h2&gt;
&lt;p&gt;Outside the capital, there are less tech opportunities but they are
growing daily. Gyumri has its own Tumo, Loft and the
&lt;a href=&quot;http://gtc.am/en/home/&quot;&gt;GTC&lt;/a&gt;. Similarly, Vanadzor also has new
technology center: &lt;a href=&quot;http://vtc.am/en/&quot;&gt;VTC&lt;/a&gt;. In Artsakh, there is a
Tumo center as well.&lt;/p&gt;
&lt;h1&gt;Places coders hangout at&lt;/h1&gt;
&lt;h2&gt;Yerevan-based&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.achajour.am/en/&quot;&gt;Achajour&lt;/a&gt;-This is a cool cafe, usually many
English speakers and many coders, prime place to make friends and
run into familiar faces.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.facebook.com/The.LOFT.center/&quot;&gt;Loft&lt;/a&gt;-The best place to
get serious work done but usually just overnight. Overnight deal is
fantastic, only 1000 dram (~$2) for the entire night from 12AM-7AM,
unlimited coffee and snacks.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Discussion groups&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.facebook.com/groups/410797219090898/&quot;&gt;iterate hackerspace&lt;/a&gt;-Facebook group.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Tech events 2018&lt;/h1&gt;
&lt;h2&gt;Hackathons&lt;/h2&gt;
&lt;h3&gt;January&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.facebook.com/events/407926479641201/permalink/410025256097990/&quot;&gt;Global Game Jam Armenia 2018&lt;/a&gt;-January 26, 2018&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Meetups&lt;/h2&gt;
&lt;h3&gt;January&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.facebook.com/events/1811743828899726/&quot;&gt;GEEK Girls’ Dinner: Welcome to 2018&lt;/a&gt;-January 7, 2018&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Free JavaScript learning material! (nodejs, React, JSConf)]]></title><description><![CDATA[By Edgar Aroutiounian ,
catch me on  twitter Here are some  JavaScript  resources you can use when learning. nodejs These are lecture notes…]]></description><link>https://yerevancoder.com/2017-12-21-javascript-resources/</link><guid isPermaLink="false">https://yerevancoder.com/2017-12-21-javascript-resources/</guid><pubDate>Thu, 21 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;By Edgar Aroutiounian&lt;/em&gt;,
catch me on &lt;a href=&apos;https://twitter.com/@edgararout&apos;&gt;twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are some &lt;strong&gt;JavaScript&lt;/strong&gt; resources you can use when learning.&lt;/p&gt;
&lt;h2&gt;nodejs&lt;/h2&gt;
&lt;p&gt;These are lecture notes done for nodejs&lt;/p&gt;
&lt;h3&gt;English&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-english/lecture1.html&quot;&gt;lecture-1&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-english/lecture2.html&quot;&gt;lecture-2&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-english/lecture3.html&quot;&gt;lecture-3&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-english/lecture4.html&quot;&gt;lecture-4&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-english/lecture5.html&quot;&gt;lecture-5&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-english/lecture6.html&quot;&gt;lecture-6&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-english/lecture7.html&quot;&gt;lecture-7&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-english/lecture8.html&quot;&gt;lecture-8&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;հայերեն&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-armenian/lecture1.html&quot;&gt;lecture-1&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-armenian/lecture2.html&quot;&gt;lecture-2&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-armenian/lecture3.html&quot;&gt;lecture-3&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-armenian/lecture4.html&quot;&gt;lecture-4&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-armenian/lecture5.html&quot;&gt;lecture-5&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-armenian/lecture6.html&quot;&gt;lecture-6&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-armenian/lecture7.html&quot;&gt;lecture-7&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/backend-bootcamp-armenian/lecture8.html&quot;&gt;lecture-8&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ReactJS&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://iteratehackerspace.com/frontend-bootcamp-english/lecture-1&quot;&gt;lecture-1&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/frontend-bootcamp-english/lecture-2&quot;&gt;lecture-2&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/frontend-bootcamp-english/lecture-3&quot;&gt;lecture-3&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/frontend-bootcamp-english/lecture-4&quot;&gt;lecture-4&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/frontend-bootcamp-english/lecture-5&quot;&gt;lecture-5&lt;/a&gt;
&lt;a href=&quot;http://iteratehackerspace.com/frontend-bootcamp-english/lecture-6&quot;&gt;lecture-6&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;JavaScript conf&lt;/h2&gt;
&lt;h3&gt;Shahen Hovhannisyan:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1maSE3MD3RgtAGwvTj1mTDNTdmumpbUgm48azCcbp6r0/edit#slide=id.p&quot;&gt;V8 Engine&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Michael Manukyan:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://jsconf17.mmanukyan.io/#/&quot;&gt;Production Webpack&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;General Հուշաթերթիկ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/iteratehackerspace/cheatsheet&quot;&gt;cheatsheet&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The success of JSConf in Armenia and what the future holds]]></title><description><![CDATA[By Edgar Aroutiounian ,
catch me on  twitter Genesis The first conference dedicated just to  JavaScript  in Armenia is
over.  JSConf 201…]]></description><link>https://yerevancoder.com/2017-12-20-init-post/</link><guid isPermaLink="false">https://yerevancoder.com/2017-12-20-init-post/</guid><pubDate>Wed, 20 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;By Edgar Aroutiounian&lt;/em&gt;,
catch me on &lt;a href=&apos;https://twitter.com/@edgararout&apos;&gt;twitter&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Genesis&lt;/h2&gt;
&lt;p&gt;The first conference dedicated just to &lt;strong&gt;JavaScript&lt;/strong&gt; in Armenia is
over. &lt;a href=&apos;https://jsconf.am&apos;&gt;JSConf 2017&lt;/a&gt; was an amazing
success and well over 700 people came to &lt;a href=&apos;https://aua.am&apos;&gt;AUA&lt;/a&gt;
to see, learn from and engage with the best programmers
in our Armenian tech community.&lt;/p&gt;
&lt;p&gt;I initially had a vision for a conference just for JavaScript in
Armenia, around May 2017 or so. Initial planning was to have the
conference be at &lt;a href=&apos;https://tumo.org/&apos;&gt;Tumo&lt;/a&gt; and I started
that conversation with Tumo officials. However, I started
to get overwhelmed, overworked and couldn’t keep up with all the demands.&lt;/p&gt;
&lt;p&gt;But then the most amazing thing happened, the programmer community in
Armenia clearly wanted the conference to still happen and Gevorg
Harutyunyan, my good friend whom I’ve known since basically day one of
starting
&lt;a href=&apos;http://iteratehackerspace.com&apos;&gt;iterate hackerspace&lt;/a&gt; took
the initiative and spearheaded the project. As I watched from San
Francisco, Gevorg assembled a team of very dedicated people from the
Yerevan tech scene and they started implementing JSConf Armenia.&lt;/p&gt;
&lt;p&gt;Initial estimates of conference attendees began at 100, we thought
that was a huge number at the time…but then it grew to 200
registrants, and then 400, then 800 and eventually to an insane 1500!&lt;/p&gt;
&lt;h2&gt;Future&lt;/h2&gt;
&lt;p&gt;The success of JSConf Armenia shows that there is a huge pent up
demand for community, for knowledge sharing and JavaScript in
Armenia. Many people asked when the next conference was going to be,
even while the current one didn’t even finish yet!&lt;/p&gt;
&lt;p&gt;So we have many more events planned, the future for tech in Armenia is
very bright and we must continue investing in our greatest resource,
our people.&lt;/p&gt;</content:encoded></item></channel></rss>